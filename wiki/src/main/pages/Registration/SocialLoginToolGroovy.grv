import org.brickred.socialauth.AuthProvider;
import org.brickred.socialauth.AuthProviderFactory;
import com.xpn.xwiki.api.XWiki;
import com.xpn.xwiki.api.Context
import javax.servlet.http.HttpServletResponse
import javax.servlet.http.HttpServletRequest
import com.xpn.xwiki.api.Document;
import com.xpn.xwiki.web.XWikiMessageTool
import org.apache.commons.logging.Log
import org.apache.commons.logging.LogFactory
import org.brickred.socialauth.Permission
import org.brickred.socialauth.Profile
import com.xpn.xwiki.doc.XWikiAttachment
import org.xwiki.container.servlet.filters.SavedRequestManager
import com.xpn.xwiki.plugin.mailsender.MailSenderPluginApi
import org.apache.commons.httpclient.HttpClient
import org.apache.commons.httpclient.methods.GetMethod
import com.xpn.xwiki.api.Attachment;

public class SocialLoginToolGroovy {
    // the properties are static... it means they are loaded with the compilation of the groovy class
    private static Properties properties = null;

    private XWiki xwiki = null;
    private Context context = null;
    HttpServletRequest request = null;
    private XWikiMessageTool msg = null;
    private List errors = new ArrayList();
    String providerId = null;
    String city="", state="", country="";
    List warningFields=new ArrayList(), okFields=new ArrayList();
    String username, password, firstName, lastName, email, memberType, postalCode="", longitude="", latitude="", agree;
    String neamember, neaaffiliate, neaoccupation, neaprofession;
    String validKey = null;
    String nowTarget = null;
    boolean hasReadProviderProfile = false;
    Object validation;
    def targets;
    def profile = null;
    boolean hasAuthenticated = false;


    MailSenderPluginApi mailsender = null;


    Log LOG = LogFactory.getLog("groovyPages.SocialLogin");

    public String init(XWiki xwiki, Context context, HttpServletRequest request, XWikiMessageTool msg, Object targets) {
        this.xwiki= xwiki;
        this.context = context;
        this.request = request;
        this.msg = msg;
        this.targets = targets;
        if(properties==null) {
            properties = new Properties();
            properties.load(
                    request.getSession(true).getServletContext().
                            getResourceAsStream("/WEB-INF/oauth_consumer.properties"));
        }
        validation = xwiki.parseGroovyFromPage("Registration.Validation");
        validation.init(xwiki, errors, warningFields, okFields);

        LOG.info("Initted");
        return "";
    }

    public void grabFrom(Object other1) {
        if(other1==null) return;
        if(!(other1 instanceof SocialLoginToolGroovy)) {
            System.out.println("tograb is not correct: \"" + other1 + "\" of class " + other1.getClass() );
            return;
        }
        SocialLoginToolGroovy other = other1;
        System.out.println("SocialLoginToolGroovy  grabbing into " + this + " being prepopulated from " + other);
        this.hasReadProviderProfile = other.hasReadProviderProfile
        this.firstName = other.firstName;
        this.lastName = other.lastName;
        this.email = other.email;
        this.agree = other.agree;
        this.city = other.city;
        this.state = other.state;
        this.country = other.country;
        this.memberType = other.memberType;
        this.longitude = other.longitude;
        this.latitude = other.latitude;
        this.postalCode = other.postalCode;

        // nea fields
        this.neamember = other.neamember;
        this.neaaffiliate = other.neaaffiliate;
        this.neaoccupation = other.neaoccupation;
        this.neaprofession = other.neaprofession;
        
        this.password = other.password;
        this.providerId = other.providerId;
        this.username = other.username;

        this.errors = other.errors;
        this.warningFields = other.warningFields;
        this.okFields = other.okFields;
        this.nowTarget = other.nowTarget;
        System.out.println("Errors: " + errors);
        System.out.println("WarningFields: " + warningFields);
        System.out.println("okFields: " + okFields);
    }

    public String authenticateUser(Document userDoc) {
        try {
            System.out.println("Authenticating user " + userDoc);
            if(userDoc==null) return null;
            context.context.put("ajax",true);
            xwiki.checkAuth(userDoc.fullName, userDoc.get("XWiki.XWikiUsers").get("password").value, "false")
            request.session.setAttribute("curriki.analytics.toLogView","/join/"+
                    ( providerId==null ? "inCurriki" : providerId) +"/login");
            nowTarget = getRedirectTarget(true);
            this.hasAuthenticated  = true;
            //nowTarget = request.session.getAttribute("xredirect");
            return "redirectOnTop";
            //def xwikiAuthenticator = xwiki.getXWiki().getAuthService(); //.@authenticators.get('xwiki')
            //def psm = xwikiAuthenticator.@persistentLoginManager;
            // psm.rememberLogin(request, response, userDoc.fullName, password)
            //xwikiAuthenticator.authenticate(userDoc.fullName, password, context.context);
            //xwiki.getXWiki().getAuthService().authenticate(userDoc.fullName, password, context.context)
        } catch (Exception ex) {
            LOG.warn("Trouble at authenticating: ", ex);
            errors.add(msg.get('xwiki.socialLogin.genericError', [ex.message]));
            return "error";
        };
    }

    public List getErrors() {
        return errors;
    }

    /**
     * Initiate the OAuth dance with the requested provider
     */
    public String bounceToProvider(HttpServletResponse response) {
        try {
            System.out.println("Bouncing to Provider " + request.provider);
            AuthProvider provider = AuthProviderFactory.getInstance(request.provider, properties);
            //println provider; // ???
            String maybeRedirect = request.getParameter("xredirect");
            if(maybeRedirect!=null && maybeRedirect.length()>0)
                maybeRedirect = "&xredirect=" +request.getParameter("xredirect");
            else maybeRedirect = "";
            String maybeXpage="";
            //if(request.framed=="true")
            maybeXpage="&xpage=popup";
            String targetUrl = "http://" + xwiki.getXWiki().Param('curriki.system.hostname', 'broken-url') +"/xwiki/bin" +
                    request.getPathInfo()  + '?callback=1' +maybeXpage; //+ maybeRedirect ;

            provider.setPermission(Permission.AUTHENTICATE_ONLY);
            String url = provider.getLoginRedirectURL(targetUrl);
            System.out.println("Redirecting to " + url);

            // Store in session
            request.session.setAttribute("org.brickred.socialauth.AuthProvider", provider);
            request.session.setAttribute("org.brickred.socialauth.AuthProvider.hint", request.provider);
            response.sendRedirect(url);
            return "nothing";
        } catch (Exception ex) {
            LOG.warn("Generic error at bounce to provider.", ex);
            errors.add(msg.get('registration.genericError', [ex.message]));
            return "error";
        };
    }

    /**
     * We've got a response from the provider, let's treat it
     */
    public String processAuthReturn() {

        try {
            // get the provider back from session
            AuthProvider providerObj = request.session.getAttribute("org.brickred.socialauth.AuthProvider");
            this.providerId = request.session.getAttribute("org.brickred.socialauth.AuthProvider.hint");
            LOG.info("Welcoming from provider " + providerId);

            // verify the authentication
            LOG.info("Verifying " + providerObj + " for provider " + providerId);
            try {
                if(request.error!='access_denied')
                    profile = providerObj.verifyResponse(request)
                LOG.info("obtained profile: " + profile);
            } catch (Exception ex) { LOG.warn("Error while verifing response", ex); }
            if(profile==null) {
                LOG.info("Refused authorization.");
                return "refused";
            }

            // Search for this profile id in database, find user
            String query =", BaseObject userObj, BaseObject socialLoginObj, StringProperty provider, StringProperty profileId where " +
                    " userObj.className='XWiki.XWikiUsers' and doc.web='XWiki' and doc.fullName=userObj.name " +
                    " and socialLoginObj.className='XWiki.SocialLoginProfileClass' and " +
                    " doc.fullName=socialLoginObj.name and " +
                    " provider.id.id = socialLoginObj.id and profileId.id.id = socialLoginObj.id and " +
                    " provider.name='provider' and profileId.name='validatedId' and provider.value='"+providerId+"' and profileId.value='"+profile.validatedId+"'";
            System.out.println("Querying: " + query);
            List userDocs = xwiki.searchDocuments(query,30,0);
            //original: XWQL: from doc.object(XWiki.XWikiUsers) as user, doc.object(XWiki.SocialLoginProfileClass) as profile where profile.provider = '""" + provider + "' and profile.validatedId = '" + profile.validatedId + "'")

            System.out.println("Found userDocs: " + userDocs);
            for (result in userDocs) {
                if(result==null) continue;
                Document userDoc = xwiki.getDocument(result)
                updateUserDoc(userDoc, false); // We dont merge the docs here
                System.out.println("Doc: " + result + " of class " + result.getClass());
                authenticateUser(userDoc)
            }

            if(userDocs==null || userDocs.isEmpty()) {
                // Not authenticated/redirected yet ? -> You must be new here
                // You will have to pick-up a username and dad will create an account for you

                // Store the social profile in the session
                request.session.setAttribute("org.brickred.socialauth.Profile", profile);
                LOG.warn("Received from " + providerId + " profile " + profile + ".");


                readProviderProfile();
                def validation = xwiki.parseGroovyFromPage("Registration.Validation");
                validation.init(xwiki, errors, warningFields, okFields);
                if(!validation.isValidEmail(((Profile)profile).email, false)) {
                    if(validation.foundAccountName) {
                        validation.zapErrors();
                        mergeAccountWithProfile(profile, validation.foundAccountName, providerId);
                        request.session.setAttribute("header.message","login.register.header.account-is-merged." + providerId);
                        return "backFromAuthorization";
                    }
                }


                // take to the display of the form to create the username
                nowTarget = "/xwiki/bin/view/Registration/SocialLogin?xpage=popup&xaction=creationForm"
                return "backFromAuthorization";
            } else {
                // final step, login worked, existing user
                def afterLogin = targets!=null?
                    targets.afterLogin :
                    request.getSession().getAttribute("xredirect");
                nowTarget = "/xwiki/bin/view/Registration/JumpToTop?xpage=plain&redir=" + afterLogin;
                System.out.println("Redirecting to " + afterLogin+ " through a redirectOnTop");
                return "backFromAuthorization";
            }

        } catch (Exception ex) {
            ex.printStackTrace();
            errors.add(msg.get('xwiki.socialLogin.genericError', [ex.message]));
            return "error";
        };
    }


    public void readProviderProfile() {
        if(hasReadProviderProfile) return;
        hasReadProviderProfile = true;
        profile = request.session.getAttribute("org.brickred.socialauth.Profile");
        providerId = request.session.getAttribute("org.brickred.socialauth.AuthProvider.hint");
        firstName = profile.getFirstName();
        lastName = profile.getLastName();
        email = profile.getEmail();
        city = profile.location;
        //state = profile.state;
        country  = profile.country;

        username = profile.displayName;
        if(username==null || username=='') {
            int p = email.indexOf('@');
            username = email.substring(0,p);
            username = username.replaceAll("[^a-zA-Z0-9]","_");
            username = username.replaceAll("__","_").replaceAll("__","_");
            if(!validation.isValidUsername(username, false)) {
                int i=0;
                while(i<20) {
                    if(validation.isValidUsername(username + i, false)) break
                    i++;
                }
                username = username +i;
            }
        }
    }


    /**
     * Create a new user profile from the social profile result
     */

    public String tryCreateNewProfile() {
        return updateUserDoc(null, false); //Nothing to merge
    }

    public String updateUserDoc(Document preExistingUserDoc, isMerging) {
        if(profile==null) profile = request.session.getAttribute("org.brickred.socialauth.Profile")
        String provider = request.session.getAttribute("org.brickred.socialauth.AuthProvider.hint");
        boolean isNew = preExistingUserDoc == null;
        if(isNew) LOG.info("Trying to create new profile from provider " + provider);
        else LOG.warn("Updating doc " + preExistingUserDoc + " with info from provider " + provider);

        if(isNew) username = request.username; else username = preExistingUserDoc.getName();
        firstName = profile.firstName;
        lastName = profile.lastName;
        email = profile.email;
        city = profile.location;
        country = profile.country;
        password = request.password;
        memberType = request.getParameter("member_type");
        if(memberType==null) memberType="-";

        // BEGIN NEA FIELDS
        neamember = request.getParameter("neamember");
        if(neamember==null) neamember="0";
        neaaffiliate = request.getParameter("neaaffiliate");
        if(neaaffiliate==null) neaaffiliate="-";
        neaoccupation = request.getParameter("neaoccupation");
        if(neaoccupation==null) neaoccupation="-";
        neaprofession = request.getParameter("neaprofession");
        if(neaprofession==null) neaprofession="-";
        // END NEA FIELDS
        
        if(request.getParameter("country")) country= request.getParameter("country");
        if(request.getParameter("city")) city  = request.getParameter("city");
        if(request.getParameter("state")) state = request.getParameter("state");
        if(request.getParameter("postalCode"))    postalCode = request.getParameter("postalCode");
        if(request.getParameter("longitude"))     longitude = request.getParameter("longitude");
        if(request.getParameter("latitude"))      longitude = request.getParameter("latitude");
    
        boolean passed = validation.isValidEmail(email, true);
        passed = validation.isValidUsername(username, true) & passed;
        passed = validation.isValidPassword(password, true) & passed;
        // this is not used on NEA
        // passed = validation.isValidMemberType(memberType, true) & passed;
        passed = validation.isValidAgree(request.agree, true) & passed;
        passed = validation.isValidFirstName(firstName, true) & passed;
        passed = validation.isValidLastName(lastName, true) & passed;
        passed = validation.isValidLocation(country, postalCode, city, state, longitude, latitude, !isMerging) & passed;

        System.out.println("Validation Passed? " + passed);
        if(!passed) System.out.println(" Validation Errors ( Merging is "+ isMerging +"): " + validation.errors);
        if ( passed || isMerging ) {
            // Everything clear, let's proceed

            /* def propMap = new HashMap();
            propMap.put("active", "1")
            propMap.put("email", profile.email)
            propMap.put("first_name", profile.firstName)
            propMap.put("last_name", profile.lastName)
            propMap.put("password", password)
            System.out.println("Obtained record: " + profile.properties) */

            //request.getParameterMap().put("xwikiname",userDocName);
            //request.getParameterMap().put("XWiki.XWikiUsers_0_password",password);



            Document userDoc;
            if(isNew) userDoc = createUserDoc();
            else userDoc = preExistingUserDoc;

            def userobj = userDoc.getObject("XWiki.XWikiUsers");
            userobj.set("active", "1");
            userobj.set("email_undeliverable", "0");


            createSocialLoginProfileObject(profile, userDoc, provider);
            tryToAddProfilePictureFromProfile(profile.profileImageURL, userDoc, userobj);
//            //tryToAddProfilePictureFromGoogle();
            userDoc.saveWithProgrammingRights(msg.get('xwiki.socialLogin.updatedSocialProfile'), true)

            System.out.println("New profile created and saved: " + userDoc);

            //Only if we don't merge a profile with an existing one we'll send the confirmation email.
            if(!isMerging){
                sendConfirmationEmail();
                System.out.println("Confirmation email sent.");
            }else{
                System.out.println("No Confirmation email sent.");
            }

            String view = authenticateUser(userDoc);
            if(view=="redirectOnTop") return "pleaseDonate";
            else return view;
        }
        else {
            System.out.println("New profile not created!");
            if (!username || username == '')
                errors.add(msg.get('join.error.username'));
            else if (xwiki.exists('XWiki.' + username))
                errors.add(msg.get('join.error.login_not_unique'));
            if(!errors.isEmpty())
                return "creationForm";
            else return null;
        }
    }

    public boolean isCorporateAccount() {
        return 'corporation'==memberType;
    }

    private Document createUserDoc() {
        def userDoc = new Document(xwiki.getXWiki().getDocument("XWiki.${username}", context.context), context.context);
        //userDoc.addObjectFromRequest("XWiki.XWikiUsers"); // TODO: use other explicit values ??
        def userObj = userDoc.getObject("XWiki.XWikiUsers", true);
        userObj.set("password",   password);
        userObj.set("first_name", firstName);
        userObj.set("last_name",  lastName);
        userObj.set("email",      email);
        userObj.set("email",      email);
        userObj.set("member_type",memberType);
        // BEGIN NEA FIELDS
        userObj.set("neamember",neamember);
        userObj.set("neaaffiliate",neaaffiliate);
        userObj.set("neaoccupation",neaoccupation);
        userObj.set("neaprofession",neaprofession);
        // END NEA FIELDS
        userObj.set("i_agree",   "1");
        if(city) userObj.set("city",       city);
        if(country) userObj.set('country',    country);
        if(state) userObj.set('state', state);
        if(postalCode) userObj.set('postalCode', postalCode)
        if(longitude) userObj.set('longitude', longitude);
        if(latitude) userObj.set('latitutde', latitude);
        userObj.set("show_contact","2"); // Show Your Profile:
        userObj.set("opt_out", 0); //

        userObj.set("country", country);
        userObj.set("city", city);
        userObj.set("state", state);
        userObj.set("postalCode", postalCode);
        userObj.set("longitude", longitude);
        userObj.set("latitude", latitude);

        String language = context.language;
        try {
            if(profile && profile.language) language = profile.language
            if(language!=null && language.indexOf('-')>=0) language = language.substring(0, language.indexOf('-'))
        } catch (Exception ex) {
            LOG.warn("Language \"" + language + "\" incompatible, using " + context.language + " instead.", ex);
            language = context.language;
        };
        Locale locale = new Locale(language);
        userObj.set("language",    locale.getISO3Language());

        // activate if from social login, otherwise send mail and put validation key
        if(profile) {
            System.out.println("Making profile active.")
            userObj.set("active", "1");
            userObj.set("email_undeliverable", "0");
        } else {
            System.out.println("Making profile inactive.")
            userObj.set("active", "0");
            userObj.set("email_undeliverable", "1");
            validKey = xwiki.getXWiki().generateValidationKey(16);
            userObj.set("validkey", validKey);
            userObj.set("validredirect", request.xredirect);
        }


        //userdoc.setParent("XWiki.XWikiUsers");
        userDoc.setContent('#include' + 'Form("XWiki.XWikiUserSheet")');
        userDoc.getDoc().setCreator(userDoc.getFullName());
        userDoc.getDoc().setAuthor(userDoc.getFullName());

        // set rights correct (I edit, others view)
        def rightobj = userDoc.newObject("XWiki.XWikiRights");
        rightobj.set("users", new String(username));
        rightobj.set("allow", new String("1"));
        rightobj.set("levels", new String("edit"));
        rightobj.set("groups", new String(""));

        return userDoc;
    }

    public void createSocialLoginProfileObject(Profile profile, Document userDoc, String provider) {
        def socialProfile = userDoc.getObject('XWiki.SocialLoginProfileClass', true)
        socialProfile.set('provider', provider)
        socialProfile.set('fullName', profile.fullName)
        socialProfile.set('firstName', profile.firstName)
        socialProfile.set('lastName', profile.lastName)
        socialProfile.set('displayName', profile.displayName)
        socialProfile.set('email', profile.email)
        socialProfile.set('profileImageURL', profile.profileImageURL)
        socialProfile.set('gender', profile.gender)
        //socialProfile.set('dob', profile.dob) !!! This line raised an error while logging in via facebook, this attribute seems not to be there anymore
        socialProfile.set('validatedId', profile.validatedId)
        socialProfile.set('country', profile.country)
        socialProfile.set('location', profile.location)

        def socialPrefs = userDoc.getObject('XWiki.SocialLoginClass', true)
        socialPrefs.set('preferred_provider', provider)
    }

    public void mergeAccountWithProfile(Profile profile, String userName, String provider) {
        Document userDoc = xwiki.getDocument(userName);
        if(userName.endsWith("XWikiGuest") || userName.startsWith("DeactivatedUsers."))
            throw new IllegalStateException("Can't merge an inactive user!");
        LOG.warn("Trying to merge profile of user "+userName+" with provider's profile from " + provider);

        //createSocialLoginProfileObject(profile, userDoc, provider); Not need anymore the profile object is created while updating the UserDoc

        updateUserDoc(userDoc,true); // We want to merge
        userDoc.saveWithProgrammingRights(msg.get('xwiki.socialLogin.updatedSocialProfile'), true);
        // and login!
        authenticateUser(userDoc);

    }

    /* public String acceptLoginAndRedirect() {
        String xredirect = request.session.getAttribute("xredirect");
        if(xredirect==null || xredirect=="") xredirect = request.getParameter("xredirect");
        if(xredirect==null || xredirect=="") xredirect = "/xwiki/bin/view/" + context.user.replaceAll("\\.","/");
            request.session.setAttribute("xredirect", xredirect);
        nowTarget = xredirect;
        return "redirectOnTop";
    } */

    public String getApplicationApiKey(String provider) {
        provider = provider.toLowerCase();
        if("facebook"==provider)
            return properties.getProperty("graph.facebook.com.consumer_key");
        else if("google"==provider)
            return properties.getProperty("www.google.com.consumer_key");
        else if("yahoo"==provider)
            return properties.getProperty("api.login.yahoo.com.consumer_key");
        else if("twitter"==provider)
            return properties.getProperty("twitter.com.consumer_key");
        else throw new IllegalArgumentException("Unknown provider \"" + provider + "\".");
    }


    public String action(HttpServletRequest request) {
        String a = this.actionHere(request);
        LOG.info("Action: " + a);
        System.out.println("Action: " + a);
        System.out.println("Future target: " + getRedirectTarget(false));
        return a;
    }


    public void echoToConsole() { echoToConsole("");}

    public void echoToConsole(String msg) {
        System.out.print(msg + " This is " + toString() + " with e.g. username " + username);
        if(request!=null)
            System.out.println(" with request to " + request.getRequestURI() + ".");
        else
            System.out.println(" with request to " + request + ".");
    }



    public String actionHere(HttpServletRequest request) {
        if(request.error == "access_denied" && request.error_reason == "user_denied") {
            return "refused";
        }
        else if(!request.callback && request.provider) {
            return "bounceToProvider";
        }
        else if (request.callback){
            return "processAuthReturn";
        } else if(request.xaction && request.xaction=='creationForm')
            return "creationForm";
        else if (request.xaction && request.xaction == 'createProfile') {
            return "createNewProfile";
        }
        else {
            return "nothingToDo";
        }
    }

    private static String SAVED_REQUEST = "org.xwiki.container.servlet.filters.SavedRequestManager.SavedRequest_SavedRequests";

    public String getRedirectTarget(boolean removeMe) {
        if(targets!=null) {
            String target = targets.afterLogin;
            if(removeMe) targets.cleanupTargets();
            return target;
        }
        if(removeMe==null) removeMe = false;
        String xredirect = null;
        if(request.session && request.session.getAttribute(SAVED_REQUEST)) {
            try {
                Object o = request.session.getAttribute(SAVED_REQUEST)
                if(o instanceof Map)
                    xredirect = ((Map) m).value().iterator().next()
                else
                    xredirect = ((org.xwiki.container.servlet.filters.SavedRequestManager.SavedRequest) o).requestUrl;
                if(u && u.length()>0 && removeMe) {
                    request.session.removeAttribute(SAVED_REQUEST);
                    request.session.removeAttribute("xredirect");
                }
            } catch (Exception e) { LOG.warn("Error while getting the saved request from the session ",e); }
        }
        if(xredirect==null && request.session)
            xredirect = request.session.getAttribute("xredirect");
        if(xredirect==null) {
            if(context.user!="XWiki.XWikiGuest")
                xredirect="/xwiki/bin/view/MyCurriki/";
            else
                xredirect="/";
        }
        System.out.println("redirect target is " + xredirect);
        if(removeMe) {
            request.session.removeAttribute("xredirect")
            request.session.removeAttribute(SAVED_REQUEST);
        };
        return xredirect;
    }

    public void tryToAddProfilePictureFromProfile(String url, Document userDoc, com.xpn.xwiki.api.Object userObj) {
        try {
            if(url==null || url.length()==0) return;
            // don't overwrite existing picture
            System.out.println("Defining profile picture form " + url);
            def avatar = userObj.get("avatar");
            if(avatar!=null && !"".equals(avatar)) {
                System.out.println("avatar \"" + avatar + "\" of class " + avatar.getClass() + " already there, leaving quiet.");
                return;
            }else {
                System.out.println("no avatar there (avatar: "+avatar+")!  We're going to get the one from the social authprovier.");
            };
            URL u = new URL(url)
            String name=u.getPath()
            if(name.contains("/")) {
                if(name.endsWith("/") && name.length()>1)
                    name = name.substring(0, name.length()-1);
                name = name.substring(name.lastIndexOf("/")+1);
            }
            HttpClient client = new HttpClient();
            GetMethod method = new GetMethod(u.toExternalForm());
            int result = client.executeMethod(method);
            if(result==200) {
                userDoc.addAttachment(name, method.getResponseBodyAsStream());
            }
            userObj.set("avatar",name)
        } catch (Exception ex) {
            LOG.warn("Couldn't write profile picture.",ex);
        };

    }

   /**
    * Not in use yet
    **/
    public void tryToAddProfilePictureFromGoogle(){
        try {
            String pictureApiUrl = "https://www.google.com/m8/feeds/photos/profile/curriki.org/felix";
            AuthProvider providerObj = request.session.getAttribute("org.brickred.socialauth.AuthProvider");
            providerObj.verifyResponse(request);
            org.brickred.socialauth.util.Response response = providerObj.api(pictureApiUrl, "GET", new HashMap<String, String>(), new HashMap<String, String>(), "");
            System.out.println("Try to load profile Picture from Google.." + response.getResponseBodyAsString("UTF-8").length() );
        } catch (Exception e){
            LOG.warn("Error while loading profile picture from Google: " + e);
        }
    }


    public String getNowTarget() {
        return nowTarget;
    }


    public void sendConfirmationEmail() {
        sendRegistrationMail("MemberRegCompleteEmail", "CorporateRegCompleteEmail");
    }




    // ============================== SIMPLE REGISTRATION ===============================

    public boolean readAndValidateQueryParams() {
        username = request.username;
        firstName = request.firstName;
        lastName = request.lastName;
        email = request.email;
        city = request.city;
        country = request.country;
        postalCode = request.postalCode;
        state = request.state;
        longitude = request.longitude;
        latitude = request.latitude;
        password = request.password;
        memberType = request.getParameter("member_type");
        if(memberType==null) memberType="-";
        
        // BEGIN NEA FIELDS
        neamember = request.getParameter("neamember");
        if(neamember==null) neamember="0";
        neaaffiliate = request.getParameter("neaaffiliate");
        if(neaaffiliate==null) neaaffiliate="-";
        neaoccupation = request.getParameter("neaoccupation");
        if(neaoccupation==null) neaoccupation="-";
        neaprofession = request.getParameter("neaprofession");
        if(neaprofession==null) neaprofession="-";
        // END NEA FIELDS

        boolean passed = validation.isValidEmail(email, true);
        passed = validation.isValidUsername(username, true) & passed;
        passed = validation.isValidPassword(password, true) & passed;
        // this is not used on NEA
        // passed = validation.isValidMemberType(memberType, true) & passed;
        passed = validation.isValidAgree(request.agree, true) & passed;
        passed = validation.isValidFirstName(firstName, true) & passed;
        passed = validation.isValidLastName(lastName, true) & passed;
        passed = validation.isValidLocation(country, postalCode, city, state, longitude, latitude, true) & passed;
        return passed;
    }

    public boolean createUser() {
        Document userDoc = createUserDoc();
        userDoc.saveWithProgrammingRights(msg.get('xwiki.socialLogin.updatedSocialProfile'), true)
        sendValidationEmail();
        //authenticateUser(userDoc);
        return true;
    }


    public void sendValidationEmail() {
        sendRegistrationMail("MemberRegKeySentEmail", "CorporateRegKeySentEmail");
    }

    private void sendRegistrationMail(String nonCorpPage, String corpPage) {
        long time=System.currentTimeMillis();
        mailsender = xwiki.mailsender;
        def emailDoc = "Registration." + nonCorpPage;
        if(isCorporateAccount())
            emailDoc = "Registration." + corpPage;
        LOG.warn("Sending mail to " + email + " with page " + emailDoc + '.');
        emailDoc = xwiki.getDocument(emailDoc);
        def text = xwiki.renderText(emailDoc.getContent(), emailDoc);
        def subject = xwiki.renderText(emailDoc.title, emailDoc);
        System.out.println("Took: " + (System.currentTimeMillis()-time) + " ms to prepare email body.");
        time=System.currentTimeMillis();

        def from = msg.get("registration.email");
        if(from==null || from=="") from="webmaster@curriki.org";
        if(msg.get("registration.email.name")!="registration.email.name") from = msg.get("registration.email.name") + "<" + from + ">";

        mailsender.sendHtmlMessage(from, email, null, null,
                subject, text, text.replaceAll("<[^>]*>",""), []);
        System.out.println("Took: " + (System.currentTimeMillis()-time) + " ms to send email.");
    }

    public String validateUser() {
        def userdoc = null;
        if(username==null) username = request.getParameter("xwikiname");
        if(username!=null) userdoc = xwiki.getDocument("XWiki." + username);
        if(userdoc==null) return "join.validation.missing-username";
        def userobj = userdoc.getObject("XWiki.XWikiUsers", false);
        if(userobj==null) return "join.validation.missing-username";
        grabFromUserDoc(userdoc);
        def requestKey = request.getParameter("validkey");
        if(requestKey==null || requestKey==""
                || requestKey != userobj.getProperty("validkey").value)
            return "join.validation.missing-key";
        // everything clear let's activate user
        userobj.set("active", "1");
        userobj.set("email_undeliverable", "0");
        userdoc.saveWithProgrammingRights("Validation.");
        // and send validation mail
        sendRegistrationMail("MemberRegCompleteEmail", "CorporateRegCompleteEmail");
        authenticateUser(userdoc);
        return "success";
    }

    // ============================== post login... to create the mail again ============
    public void grabFromCurrentUser() {
        username = context.user;
        LOG.info("Grabbing from " + username);
        Document userDoc = xwiki.getDocument(username);
        grabFromUserDoc(userDoc);
    }

    public void grabFromRequestParam() {
        def userdoc = null;
        if(username==null) username = request.getParameter("xwikiname");
        if(username!=null) userdoc = xwiki.getDocument("XWiki." + username);
        if(userdoc!=null) {
            grabFromUserDoc(userdoc);
        }
    }


    private void grabFromUserDoc(Document userDoc) {
        com.xpn.xwiki.api.Object userObj = userDoc.getObject("XWiki.XWikiUsers", false);
        this.firstName = userObj.get("first_name");
        this.lastName = userObj.get("last_name");
        this.validKey = userObj.getProperty("validkey").value;
        this.email = userObj.get("email");
        this.memberType = userObj.getProperty("member_type").value;
    }
}
