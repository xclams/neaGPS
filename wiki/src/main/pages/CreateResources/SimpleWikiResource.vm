{{velocity}}
## http://next.dev.curriki.org/xwiki/bin/edit/CreateResources/SimpleWikiResource
## originally from http://next.dev.curriki.org/xwiki/bin/view/Groups/CreateNewGroup?viewer=code&showlinenumbers=0&language=en
## NPM attempting to emulate first form in http://www.curriki.org/xwiki/bin/view/Project/Form+Templates?xpage=print&language=en
##
## ---------- PREAMBLE, CHECK AUTHORIZATION ----------
##
##UNCOMMENT-TO-USE-LOCAL-STYLESHEET <link rel="stylesheet" href="/xwiki/bin/view/CreateResources/styleG?xpage=plain" type="text/css" />
##
#if( $context.user=="XWiki.XWikiGuest" ) ## {
  #set( $logredir = $xwiki.getRequestURL() )
  #set( $url = $xwiki.getURL("XWiki.XWikiLogin","login","xredirect=$logredir") )
  $msg.get("createresources.needaccount", [$url])
#else ## } {
  ##
  ## ----- OK, WE HAVE AUTHORITY SETUP THE FORM POST/GET ETC  -----
  ##
  #includeMacros("CreateResources.StyledMacros20")
  ##  parameters passed by other forms or itself
  #set( $pageName   = $request.getParameter("pageName") )
  #set( $cameFrom   = $request.getParameter("cameFrom") )
  #set( $flow       = $request.getParameter("flow") )
  #set( $parentPage = $request.getParameter("parentPage") )
  #set( $publishSpace = $request.getParameter("publishSpace") )
## DEBUG DEBUG DEBUG
## <p>( before setting newAsset '$!request.page $request.method ): newTextAsset: '$!newTextAsset' , newAsset: '$!newAsset' , pageName: '$!pageName' , cameFrom: '$!cameFrom' , flow: '$!flow' , parentPage: '$!parentPage' , publishSpace: '$!publishSpace'</p>
## DEBUG DEBUG DEBUG
  #if( "$!pageName" != "" ) ## {
     ## pageName is name of previously created asset, get it and use it.
     #set( $newAsset  = $xwiki.curriki.fetchAsset($pageName) )
  #else ## } {
    ## empty pageName means no asset... so create new one. This is "default" action
     #set( $newAsset = $xwiki.curriki.createAsset($xwiki.null) )
     ## note-below: <input type="hidden" name="pageName" value="$!newAsset.fullName"  />
     ## so followup POSTs set pageName to newly created asset, i.e. condition below:
  #end ## }
  #if( "$!newAsset"=="" ) ## {
    {{html}}
    #if( "$!pageName" != "" )<p>asset creation error:</p>#else<p>asset lookup error:</p>#end
    <dl>
      <dt>request.method</dt><dd>$!request.method</dd>
      <dt>request.page</dt><dd>$!request.page</dd>
      <dt>getParameter("pageName")</dt><dd>$!pageName</dd>
      <dt>getParameter("cameFrom")</dt><dd>{pre}$!cameFrom{/pre}</dd>
      <dt>getParameter("flow")</dt><dd>$!flow</dd>
      <dt>getParameter("parentPage")</dt><dd>$!parentPage</dd>
      <dt>getParameter("publishSpace")</dt><dd>$!publishSpace</dd>
    </dl>
    {{/html}}
  #else ## } ----- $newAsset defined for entire branch below ----- {
  ## create or get newTextAsset -- used to display WYSIWYG editor
  #if( !$newAsset.getObject("CurrikiCode.TextAssetClass") ) ## {
    ## create TextAssetClass for use by WYSIWYG
    #set( $newTextAsset = $newAsset.newObject("CurrikiCode.TextAssetClass") )
  #else ## } {
    ## fetch existing TextAssetClass for use by WYSIWYG
    #set( $newTextAsset = $newAsset.getObject("CurrikiCode.TextAssetClass") )
  #end ## }
## DEBUG DEBUG DEBUG
## <p>( '$!request.page $request.method ): newTextAsset: '$!newTextAsset' , newAsset: '$!newAsset' , pageName: '$!pageName' , cameFrom: '$!cameFrom' , flow: '$!flow' , parentPage: '$!parentPage' , publishSpace: '$!publishSpace'</p>
## DEBUG DEBUG DEBUG
##
## ---------- JAVASCRIPT SPECIFICALLY FOR THIS FORM ----------
##
{{html clean=false}}
<style type="text/css">
.curriki-form1 .mceEditorIframe { height: 410px !important; width: 100%  !important; }
input { width:expression(this.type=="text" ? "83%" : "style"); }
</style>
<script type="text/javascript" src="$xwiki.getSkinFile('js/yui/yahoo/yahoo-min.js')" ></script>
<script type="text/javascript" src="$xwiki.getSkinFile('js/yui/treeview/treeview-min.js')" ></script>
<script type="text/javascript" src="$xwiki.getSkinFile('js/yui/treeview/checknode.js')"></script>
<script language="javascript" type="text/javascript">

// ----------------------------------- override YUI checknode method -------------------
/**
 * jsj add
 *Invoked when the user press space key
 */
YAHOO.widget.CheckNode.prototype.getKeyCheck = function() {
    return " if( 32 == (window.event ? event.keyCode : event.which) ){ "+"YAHOO.widget.TreeView.getNode(\'" + this.tree.id + "\'," +
        this.index + ").checkClick();"+"if (event.preventDefault) event.preventDefault( ); else event.returnValue = false;}";
};

// Overrides YAHOO.widget.TextNode
YAHOO.widget.CheckNode.prototype.getNodeHtml = function() {
    // this.logger.log("Generating html");
    var sb = new Array();

    sb[sb.length] = '<table border="0" cellpadding="0" cellspacing="0">';
    sb[sb.length] = '<tr>';

    for (i=0;i<this.depth;++i) {
        sb[sb.length] = '<td class="' + this.getDepthStyle(i) + '">&#160;</td>';
    }

    sb[sb.length] = '<td';
    sb[sb.length] = ' id="' + this.getToggleElId() + '"';
    sb[sb.length] = ' class="' + this.getStyle() + '"';
    if (this.hasChildren(true)) {
        sb[sb.length] = ' onmouseover="this.className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getHoverStyle()"';
        sb[sb.length] = ' onmouseout="this.className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getStyle()"';
    }
    sb[sb.length] = ' onclick="javascript:' + this.getToggleLink() + '">&#160;';
    sb[sb.length] = '</td>';

    // check box
    sb[sb.length] = '<td';
    sb[sb.length] = ' id="' + this.getCheckElId() + '"';
    sb[sb.length] = ' class="' + this.getCheckStyle() + '"';
    sb[sb.length] = ' onclick="javascript:' + this.getCheckLink() + '">';
    sb[sb.length] = '&#160;</td>';


    sb[sb.length] = '<td>';
    sb[sb.length] = '<a';
    sb[sb.length] = ' id="' + this.labelElId + '"';
    sb[sb.length] = ' class="' + this.labelStyle + '"';
    sb[sb.length] = ' href="' + this.href + '"';
    sb[sb.length] = ' target="' + this.target + '"';
    if (this.hasChildren(true)) {
        sb[sb.length] = ' onmouseover="document.getElementById(\'';
        sb[sb.length] = this.getToggleElId() + '\').className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getHoverStyle()"';
        sb[sb.length] = ' onmouseout="document.getElementById(\'';
        sb[sb.length] = this.getToggleElId() + '\').className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getStyle()"';
    }
    sb[sb.length] = ' onkeypress="javascript:' + this.getKeyCheck(this.event)+'">';
    //sb[sb.length] = '>';
    sb[sb.length] = this.label;
    sb[sb.length] = '</a>';
    sb[sb.length] = '</td>';
    sb[sb.length] = '</tr>';
    sb[sb.length] = '</table>';

    return sb.join("");
};
/* <![CDATA[ */
//
//
//
function checkSimpleResourceForm() {
  var missed_fields_str = '';
  if (getFieldContentStr('CurrikiCode.AssetClass_0_title') == null) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.title')');
  }
  if (getFieldContentStr('CurrikiCode.AssetClass_0_description') == null) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.description')');
  }
  {
    var form_fw_items = getFieldContentStr('CurrikiCode.AssetClass_0_fw_items');
    if ((form_fw_items == null) || (form_fw_items == 'FW_masterFramework.WebHome')) {
      missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.subject')');
    }
  }
  { // Eductional-Level -- for validation, must look at "checked" on each button.
    var one_checked = false;
    for (var idx = 0, form_checkboxes = document.forms.inline['CurrikiCode.AssetClass_0_educational_level'];
	 ((idx < form_checkboxes.length) && !one_checked);
	 idx++) {
      if (form_checkboxes[idx].checked) {
	one_checked = true;
      }
    }
    if (!one_checked) {
      missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.level')');
    }
  }
  if ($('CurrikiCode.AssetClass_0_instructional_component').value.length <= 1) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.ict')');
  }
  if (getWysiwygFieldContent('mce_editor_0', 'slp_text') == null) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.content')');
  }
  if (getFieldContentStr('CurrikiCode.AssetLicenseClass_0_rightsHolder') == null) {
    missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('form.scratch.required.fields.dialog.rights')');
  }

  var error_msg = "";
  if(missed_fields_str != ''){
	error_msg = '$msg.get('form.scratch.required.fields.dialog')' + missed_fields_str;
  }else{
    if (getFieldContentStr('CurrikiCode.AssetClass_0_title').length > $msg.get("resource.title.maxlength")) {
      error_msg = '$msg.get("form.scratch.title.more.250")';
    }
  }


  if (error_msg != '') { // since theres error messages, validation failed... bail out.
    alert(error_msg);
    setSuccessMessage('');     //not POSTing due to 'false' return below, so this should not matter -- reset in case of going "back" in browser after successful POST??
    return false;
  }
  else { 			 // SUCCESS!
    setTextAssetToWikiText(formatTextareasIntoWikiText());
    setSuccessMessage('$msg.get('form.done.created.resource')');
    return true;
  }
}
//
//
//
function checkSimpleResourceDirty() {
  if (getFieldContentStr('CurrikiCode.AssetClass_0_title') != null) {
    return true;
  }
  if (getFieldContentStr('CurrikiCode.AssetClass_0_description') != null) {
    return true;
  }
  {
    var contents_o = tinyMCE.getInstanceById('mce_editor_0');
    if ((contents_o != null) && contents_o.isDirty()) {
      return true;
    }
  }
  return false;
}
//
// To be called after validation of all required fields, this function
// concatenates all the textarea and wysiwyg fields in the form
//
function formatTextareasIntoWikiText() {
  var slp_str = '';		// the string we concat into the TextAssetClass contents
  var title_markup_str = '*';
  var vert_break_str = '\\\\\n\n'
  {
    var form_content = getWysiwygFieldContent('mce_editor_0', 'slp_text');
    if (form_content != null) {
      //slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("form.scratch.step2.content.title")' + title_markup_str +  vert_break_str + form_content;
    slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + form_content;
    }
  }

  return (slp_str);
}
// set value POSTed via form hidden field w/
// id="XWiki.TextAssetClass_0_text" and default
// value="$msg.get('form.done.wysiwyg.error.wikitext')" (which if received
// on POST, indicates an unexpected error condition has occurred).
function setTextAssetToWikiText(str) {
  var input_field_TextAssetClass_o = $('CurrikiCode.TextAssetClass_0_text');
  if (input_field_TextAssetClass_o != null) {
    input_field_TextAssetClass_o.value = str;
  }
  else { alert('error in setTextAssetToWikiText()'); }
}
//
// return field's contents as string. returns null if field is empty or in case of
// lookup error.
//
function getFieldContentStr(field_id_str) {
  var field_content_o   = $(field_id_str);
  var field_content_str = (field_content_o==null) ? "" : field_content_o.value;
  if ((field_content_str.length < 1) || (field_content_str.trim() == '')) {
    return (null);
  }
  else {
    return (field_content_str);
  }
}
// get wysiwyg contents... returns null if no content, else string of
// wikitext.  if wysiwyg_id_str WYSIWYG is not created due to platform or
// browser issues, fallback to using values in textarea assoc'd with
// wysiwyg (in which case plaintext, not wikitext).
function getWysiwygFieldContent(wysiwyg_id_str, textarea_fallback_id_str) {
  var wysiwyg_content_o = tinyMCE.getInstanceById(wysiwyg_id_str); // WYSIWYG Associated with "Content"
  if (wysiwyg_content_o == null) { // no WYSIWYG-->falback to textarea contents...
    var wysiwyg_content_txt  = $(textarea_fallback_id_str).value;
    if ((wysiwyg_content_txt.length <= 1) || (wysiwyg_content_txt.trim() == '')) {
      return null;	   // --> return signal for empty fallback textarea contents
    }
    else {
      return wysiwyg_content_txt; // return fallback textarea contents
    }
  }
  else if (!wysiwyg_content_o.isDirty()) { // WYSIWYG exists but empty...
    return null;		// --> return signal for empty contents
  }
  else {			// WYSIWYG exists with content...
    return (tinyMCE.getContent(wysiwyg_id_str));
  }
}
// set value POSTed via form hidden field w/ id="successMessage" and
// default value="" (which if received on POST, indicates an unexpected
// error condition has occurred). A nonempty string-value indicates
// validation success, the contents are displayed in AssetDone as $successMessage.
function setSuccessMessage(str) {
  var input_field_successMessage_o = $('successMessage');
  if (input_field_successMessage_o != null) {
    input_field_successMessage_o.value = str;
  }
  else { alert('error in setSuccessMessage()'); }
}
//
//
//
function appendSeparatedErrorMessageStr(message_str, missed_field_err_str) {
  return(message_str + '\n\t\t' + missed_field_err_str);
}
//
// set and clear the unload dialog.
//
var needUnloadDialog = false;
function clearUnloadDialog() {
  // window.onbeforeunload = null;
  // Ext.EventManager.on(window, 'beforeunload', void);
  needUnloadDialog = false;
}
//
// window.onbeforeunload -- warn of data-loss
//
function onWindowUnloading(e) {
  // if the form is not "dirty" don't pop form.leaving.dialog
  if (needUnloadDialog && checkSimpleResourceDirty()) {
    e.browserEvent.returnValue = "$msg.get('form.leaving.dialog')";
  }
}
//
// Note that setUnloadDialog() called at bottom of page...
//
function setUnloadDialog() {
  // window.onbeforeunload = unloadDialog;
  Ext.EventManager.on(window, 'beforeunload', onWindowUnloading);
  needUnloadDialog = true;
}
/* ]]> */
</script>
{{/html}}
#set( $noDialogs = $request.getParameter("noDialogs") )  ## ?noDialogs=1 turns off add-path dialogs, for testing, or to enable "edit-again"
##
## -------------------- THE MAIN DISPLAY --------------------
##
{{html clean=false}}
<div class="header">
{{/html}}
#curriki20_formtitle($msg.get("form.scratch.title"))
{{html clean=false}}
$msg.get("form.scratch.title.description") <a href="$msg.get('form.title.description.link1.url')" target="_blank">$msg.get("form.title.description.link1")</a><span class="separator">&nbsp;|&nbsp;</span><a href="$msg.get('form.title.description.link3.url')" target="_blank">$msg.get("form.title.description.link3")</a><span class="separator">&nbsp;|&nbsp;</span><img src="$msg.get('form.title.description.link2.thumbnail')" align="middle"><a href="$msg.get('form.title.description.link2.url')" target="_blank">$msg.get("form.title.description.link2")</a>
<br />$msg.get("form.required.fields.instruction")
</div>
{{/html}}
##
## --------------------FORM ITSELF --------------------
##
## NB: default action goes back to this form, which shouldnt happen, because,
## after successful validation via call to checkSimpleResourceForm(), the button
## below sets document.forms.inline.action='$msg.get("form.done.url")'
##
{{html clean=false}}
<form action="" class="curriki-form1" id="inline" method="post">
##
## Xredirect foo
##
<input type="hidden" name="xredirect" value="$xwiki.getFormEncoded($xwiki.getRequestURL())" />
##
## XWiki.AssetClass_0_category is a "fake" property named "category" in XWiki.AssetClass.
## This is forced here to value "text". This hidden field is passed to AssetDone
## via POST and instantiated via .updateObjectFromRequest("XWiki.AssetClass")
<input type="hidden"  name="CurrikiCode.TextAssetClass_0_text" id="CurrikiCode.TextAssetClass_0_text" value="$msg.get('form.done.wysiwyg.error.wikitext')" />
<input type="hidden"  name="CurrikiCode.AssetClass_0_category" id="CurrikiCode.AssetClass_0_category" value="text" />
## successMessage is a hidden field that is set to a string in validation javascript
## after successful validation. If AssetDone gets a POST with the default value of "" set here
## it will ignore the post as it means it's not validated.
<input type="hidden"  name="successMessage" id="successMessage" value="" />
<input type="hidden"  name="page"         value="$!request.page"    />
<input type="hidden"  name="pageName"     value="$!newAsset.fullName"  />
<input type="hidden"  name="publishSpace" value="$!publishSpace"    />
<input type="hidden"  name="parentPage"   value="$!parentPage"    />
#if( "$!noDialogs"!="" )                
  ## when ?noDialogs=... argument set, pass it on to AssetDone
  <input type="hidden" name="noDialogs"  value="$noDialogs"    />
#else                                   
  ## ?noDialogs... not set, pass parameters used for add-path dialogs
  <input type="hidden" name="flow" value="$!flow" />
  <input type="hidden" name="createLessonURL" value="$msg.get('form.scratch.url')" /> ## for ICT
  <input type="hidden" name="cameFrom"
  #if( "$!cameFrom"=="" )
   value="$msg.get('form.scratch.url')" ## default cameFrom to this form
  #else
   value="$!cameFrom"                   ## pass along cameFrom
  #end
  />
#end
{{/html}}
#####################################################################
#curriki20_formpart_begin($msg.get("form.scratch.step1.header"))
#curriki20_forminstructions($msg.get("form.scratch.step1.instruction"))
#curriki20_formprompt($msg.get("sri.title_title"), $msg.get("form.scratch.title_tooltip"), $msg.get("form.scratch.title_txt"), true, "medium")
##$newAsset.display("title","edit")
{{html clean=false}}
<input type="text" id="CurrikiCode.AssetClass_0_title" name="CurrikiCode.AssetClass_0_title" maxlength="$msg.get("resource.title.maxlength")" />
{{/html}}
#curriki20_formprompt($msg.get("sri.description_title"), $msg.get("form.scratch.description_tooltip"), $msg.get("form.scratch.description_txt"), true, "medium")
$newAsset.display("description","edit")
{{html clean=false}}
<table class='subject-educational'>
<tbody>
<tr>
<td>
{{/html}}
#curriki20_formprompt($msg.get("sri.fw_items_title"), $msg.get("sri.fw_items_tooltip"), $msg.get("sri.fw_items_txt"), true, "")
$newAsset.display("fw_items","edit")
{{html clean=false}}
</td>
<td>
{{/html}}
#curriki20_formprompt($msg.get("sri.educational_level_title"), $msg.get("sri.educational_level_tooltip"), $msg.get("sri.educational_level_txt"), true, "medium")
$newAsset.display("educational_level","edit")
{{html clean=false}}
</td>
</tr>
</tbody>
</table>
{{/html}}
#curriki20_formprompt($msg.get("sri.instructional_component2_title"), $msg.get("sri.instructional_component2_tooltip"), $msg.get("sri.instructional_component2_txt"), true, "medium")
$newAsset.display("instructional_component","edit")
#curriki20_formprompt($msg.get("sri.keywords_title"), $msg.get("sri.keywords_tooltip"), $msg.get("sri.keywords_txt"), false, "medium")
$newAsset.display("keywords","edit")
#curriki20_formprompt($msg.get("sri.language_title"), $msg.get("sri.language_tooltip"), $msg.get("sri.language_txt"), false, "medium")
$newAsset.display("language","edit")
#curriki20_formpart_end()
#####################################################################
#curriki20_formpart_begin($msg.get("form.scratch.step2.header"))
#curriki20_forminstructions($msg.get("form.scratch.step2.instruction"))
#curriki20_formprompt($msg.get("form.scratch.step2.content.title"), "", $msg.get("form.scratch.step2.content.instruction"), true, "medium")
##$newTextAsset.display("text", "edit") ##WYSIWYG editor
{{html clean=false}}
<textarea id='slp_text' name='slp_text'></textarea>
{{/html}}
#curriki20_formpart_end()
#####################################################################
#curriki20_createresources_step3()
#####################################################################
#curriki20_formpart_begin($msg.get("form.scratch.step4.header"))
{{html clean=false}}
<p><label>$msg.get("form.scratch.step4.instruction")</label></p>
<p class="links">
<button class="button-orange" onclick="try { if (document.forms.inline.onsubmit) document.forms.inline.onsubmit(); if (checkSimpleResourceForm()) { clearUnloadDialog(); startWaitingDialog(); document.forms.inline.action='$msg.get("form.done.url")'; document.forms.inline.submit(); } return false; } catch(e) { alert('$msg.get("form.scratch.submit.button") button onclick error: '+e+' ...'); return false; }">$msg.get("form.scratch.submit.button")</button>
#if( "$!cameFrom" != "" )
  #set( $cancelURL = $cameFrom )
#else
  #set( $cancelURL = $xwiki.getURL("Main.WebHome") ) ## cameFrom not set means go to WebHome
#end
<button class="cancel" onclick="try { clearUnloadDialog(); window.location.href='{pre}$cancelURL{/pre}'; return false; } catch(e) { alert('$msg.get("form.scratch.cancel.button") button onclick error: '+e+' ...'); return false; }">$msg.get("form.scratch.cancel.button")</button>
</p>
{{/html}}
#curriki20_formpart_end()
#####################################################################
{{html clean=false}}
<div class="tooltips">$xwiki.addTooltipJS()</div>
</form>
{{/html}}
#set( $noWYSIWYG  = $request.getParameter("noWYSIWYG") ) ##For testing,etc, add parameter ?noWYSIWYG=1 to force WYSIWYG editors to not display, and use TEXTAREA instead
#if( "$!noWYSIWYG" == "" )


{{html}}
#wysiwyg_editProperty($newAsset "slp_text" true)
{{/html}}


#if("$!publishSpace"=="" )
  #set($user = $context.user)
  #if($user.startsWith("XWiki."))
    #set($shortname = $user.substring(6))
  #else
    #set($shortname = $user)
  #end
  #set($wysi_publishSpace = "Coll_${shortname}")
#else
  #set($wysi_publishSpace = $publishSpace)
#end
#end
{{html clean=false}}
<script language="javascript" type="text/javascript">
/* <![CDATA[ */
/*
 * this javascript code  must be at end, otherwise  strange   things
 * happen, like "License Deed" doesn't show up...
 */
function startWaitingDialog() {
#if( "$!noDialogs"!="1" )  ## {
  Curriki.showLoading();
#end ## }
}
/*
 * on window unload, dialog warning of dataloss
 */
setUnloadDialog();
/* ]]> */
</script>
{{/html}}
#end ## } -- else, aka "$!newAsset"!=""
#end ## } -- $context.user=="XWiki.XWikiGuest"
{{/velocity}}