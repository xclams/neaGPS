<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Admin</web>
<name>ExportPageList</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.dward</creator>
<author>XWiki.adminPolx</author>
<customClass></customClass>
<contentAuthor>XWiki.adminPolx</contentAuthor>
<creationDate>1172005824000</creationDate>
<date>1367912237000</date>
<contentUpdateDate>1367912237000</contentUpdateDate>
<version>2.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>Import√© depuis un le XAR</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>Admin.ExportPageList</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>6f9d4e29-fcbc-4175-8d82-8bf31c5730bb</guid>
<property>
<tags/>
</property>
</object>
<content>
&lt;h1&gt;Export Page List&lt;/h1&gt;
&lt;hr&gt;
 &lt;%

//adjust export-page-list to be callable to produce a xar exporting a range of documents
//(provided the user is admin)

import com.xpn.xwiki.*;
import com.xpn.xwiki.api.*;
import com.xpn.xwiki.doc.*;
import com.xpn.xwiki.plugin.packaging.*;

/* com.xpn.xwiki.api.XWiki xwiki;
com.xpn.xwiki.api.Context context;
javax.servlet.http.HttpServletRequest request;
javax.servlet.http.HttpServletResponse response;
com.xpn.xwiki.web.XWikiMessageTool msg;
*/

def pagelist = "Admin.PageList"
def exportdir = "/appserv/build/projects/curriki/wiki/src/main/resources"
def createzip = false;
def filename = "archive";

if(!context.hasAdminRights()) {
  response.sendError(403);
  return;
}

if (request.pagelist != null){
  pagelist = request.pagelist
  filename = pagelist;
}

if (request.createzip != null){
  createzip = true;
}

if (request.exportdir != null){
  exportdir = request.exportdir
} else {
  if(createzip) {
    exportdir = java.io.File.createTempFile("ExportPageXarTmp","xar");
    exportdir.delete();
    exportdir.mkdirs();
    println("Exported to directory " + exportdir);
  }
}

if (request.confirm=="1") {
  println "Starting export"
  println "Delete existing files"
  println "Creating package"
  pack = new Package()
  if (createzip) {
    pack.setName(filename+".xar")
  } else {
    pack.setName("curriki")
  }

  pack.setDescription("Export of Curriki Wiki-based Application Code");

  pack.setBackupPack(true);
  pack.setPreserveVersion(true);

  pack.setWithVersions(false)
//  pack.setWithVersions(true)

//  pack.addDocumentFilter(filter)
  println "Adding documents"
  def pages;
  if(request.getParameter("pageListInput")==null)
    pages = context.context.getWiki().getDocument(pagelist, context.context).content
  else
    pages = request.getParameter("pageListInput");

  def list = pages.split("(\r|\n)+")
  def last = list.size()
  def i = 0
  while (i &lt; last){
    println list[i]
    pack.add(list[i], context.context)
    i++
  }

//  pack.addAllWikiDocuments(context.context)
  println "Exporting documents"

  try {
    if (createzip){
      context.context.getResponse().setContentType("application/zip");
      context.context.getResponse().addHeader("Content-disposition", "attachment; filename="+filename+".zip")
      context.context.setFinished(true);
      pack.export(context.context.getResponse().getOutputStream(), context.context)
    } else {
      pack.exportToDir(new File(exportdir), context.context)
      println "Finished."
    }
  } catch (Exception e){
    println "Error exporting"
    println e.getMessage()
  }

  } else {
    println "&lt;h3&gt;Input the pages you wish to export in a xar&lt;/h3&gt;"
    println "&lt;form action='"+doc.name+"' method='get'&gt;&lt;textarea name='pageListInput' rows='5'&gt;"+(request.pageListInput!=null?request.pageListInput:"")+"&lt;/textarea&gt;&lt;input type='submit' name='confirm' label='confirm' value='1'/&gt;&lt;input type='hidden' name='createzip' value='true'&gt;&lt;/form&gt;"
    println "&lt;p&gt;&lt;hr&gt;&lt;h3&gt; XML Export of the Wiki from Admin/PageList&lt;/h3&gt;"
    println "[Confirm predefined export&gt;ExportPageList?pagelist="+pagelist+"&amp;confirm=1]"
  }
//%&gt;</content></xwikidoc>
