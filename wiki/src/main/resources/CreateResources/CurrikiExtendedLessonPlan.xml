<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>CreateResources</web>
<name>CurrikiExtendedLessonPlan</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>Main.AboutContributing</parent>
<creator>XWiki.panjl</creator>
<author>XWiki.adminPolx</author>
<customClass></customClass>
<contentAuthor>XWiki.adminPolx</contentAuthor>
<creationDate>1243731696000</creationDate>
<date>1367912313000</date>
<contentUpdateDate>1367912313000</contentUpdateDate>
<version>2.1</version>
<title>Curriki Extended Lesson Plan Template</title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>Import√© depuis un le XAR</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>CreateResources.CurrikiExtendedLessonPlan</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>a345ea89-8fba-4992-afe1-bbe19f549b26</guid>
<property>
<tags/>
</property>
</object>
<content>## http://next.dev.curriki.org/xwiki/bin/edit/CreateResources/CurrikiExtendedLessonPlan
#if( $context.user=="XWiki.XWikiGuest" )
  #################################### If not login, show login information
  #set( $logredir = $xwiki.getRequestURL() )
  #set( $url = $xwiki.getURL("XWiki.XWikiLogin","login","xredirect=$logredir") )
  $msg.get("createresources.needaccount", [$url])
#else
  #################################### If logined, show WebQuest page
  #includeMacros("CreateResources.StyledMacros")
  #set($pageName = $request.getParameter("pageName"))
  #set($cameFrom = $request.getParameter("cameFrom"))
  #set($flow = $request.getParameter("flow"))
  #set($parentPage = $request.getParameter("parentPage"))
  #set($publishSpace = $request.getParameter("publishSpace"))
    #set( $reqparas = $request.getParameterNames())
  #if("$!pageName" != "") 
     #set($newAsset = $xwiki.curriki.fetchAsset($pageName))
  #else
     #set($newAsset = $xwiki.curriki.createAsset($util.null))
  #end 
  #################################### If newAsset is null, show error message
  #if( "$!newAsset"=="" ) 
    #if( "$!pageName" != "" )&lt;p&gt;asset creation error:&lt;/p&gt;#else&lt;p&gt;asset lookup error:&lt;/p&gt;#end
    &lt;dl&gt;
      &lt;dt&gt;request.method&lt;/dt&gt;&lt;dd&gt;$!request.method&lt;/dd&gt;
      &lt;dt&gt;request.page&lt;/dt&gt;&lt;dd&gt;$!request.page&lt;/dd&gt;
      &lt;dt&gt;getParameter("pageName")&lt;/dt&gt;&lt;dd&gt;$!pageName&lt;/dd&gt;
      &lt;dt&gt;getParameter("cameFrom")&lt;/dt&gt;&lt;dd&gt;$!cameFrom&lt;/dd&gt;
      &lt;dt&gt;getParameter("flow")&lt;/dt&gt;&lt;dd&gt;$!flow&lt;/dd&gt;
      &lt;dt&gt;getParameter("parentPage")&lt;/dt&gt;&lt;dd&gt;$!parentPage&lt;/dd&gt;
      &lt;dt&gt;getParameter("publishSpace")&lt;/dt&gt;&lt;dd&gt;$!publishSpace&lt;/dd&gt;
    &lt;/dl&gt;
  #else
    #################################### else ,show page
    {pre}
    &lt;script language="javascript" type="text/javascript"&gt;
    function checkWebQuestForm() {
      var missed_fields_str = '';
      if (getFieldContentStr('CurrikiCode.AssetClass_0_title') == null) {
        missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('lesson.plan.required.fields.dialog.title')');
      }
      if (getFieldContentStr('CurrikiCode.AssetClass_0_description') == null) {
        missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('lesson.plan.required.fields.dialog.description')');
      }
      {
        var form_fw_items = getFieldContentStr('CurrikiCode.AssetClass_0_fw_items');
        if ((form_fw_items == null) || (form_fw_items == 'FW_masterFramework.WebHome')) {
          missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('lesson.plan.required.fields.dialog.subject')');
        }
      }
      { // Eductional-Level -- for validation, must look at "checked" on each button.
        var one_checked = false;
        for (var idx = 0, form_checkboxes = document.forms.inline['CurrikiCode.AssetClass_0_educational_level'];
         ((idx &lt; form_checkboxes.length) &amp;&amp; !one_checked);
         idx++) {
          if (form_checkboxes[idx].checked) {
        one_checked = true;
          }
        }
        if (!one_checked) {
          missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('lesson.plan.required.fields.dialog.level')');
        }
      }
      if(!checkTableText(0)){
        missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('celp.required.fields.dialog.outcomes')');
      }
      if(!checkTableText(1)){
        missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('celp.required.fields.dialog.assessment')');
      }
      if (getWysiwygFieldContent('mce_editor_1', 'nlp_procedures') == null) {
        missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('celp.required.fields.dialog.procedures')');
      }
      if (getFieldContentStr('CurrikiCode.AssetLicenseClass_0_rightsHolder') == null) {
        missed_fields_str = appendSeparatedErrorMessageStr(missed_fields_str, '$msg.get('lesson.plan.required.fields.dialog.rights')');
      }
      if (getAttachmentsSize() &gt; $msg.get("celp.step2.file.size.maximum")) {
        missed_fields_str = missed_fields_str + '\n\n' + '$msg.get('celp.step2.file.size.oversize')';
      }
      var error_msg = "";
      if(missed_fields_str != ''){
        error_msg = '$msg.get('lesson.plan.required.fields.dialog')' + missed_fields_str;
      }else{
        if (getFieldContentStr('CurrikiCode.AssetClass_0_title').length &gt; $msg.get("resource.title.maxlength")) {
          error_msg = '$msg.get("celp.title.more.125")';
        }
      }
      if (error_msg != '') { // since theres error messages, validation failed... bail out.
        alert(error_msg);
        setTextAssetToWikiText('$msg.get('form.done.wysiwyg.error.wikitext')');  // not POSTing due to 'false' return below, so this should not matter -- reset in case of going "back" in browser after successful POST??
        setSuccessMessage('');     //not POSTing due to 'false' return below, so this should not matter -- reset in case of going "back" in browser after successful POST??
        return false;
      } else {
        setTextAssetToWikiText(formatTextareasIntoWikiText());
        setSuccessMessage('$msg.get('form.done.created.lessonplan')');
        return true;
      }
    }
    function checkCELPDirty() {
      if (getAttachmentsSize() &gt; 0) {
        return true;
      }
      if (getFieldContentStr('CurrikiCode.AssetClass_0_title') != null) {
        return true;
      }
      if (getFieldContentStr('CurrikiCode.AssetClass_0_description') != null) {
        return true;
      }
      if (wysiwygIsDirty('mce_editor_0')) {
        return true;
      }
      if (wysiwygIsDirty('mce_editor_1')) {
        return true;
      }
      if (getFieldContentStr('nlp_summary') != null) {
        return true;
      }
      if (getFieldContentStr('nlp_lasting_ideas') != null) {
        return true;
      }
      if (getFieldContentStr('nlp_essential_question') != null) {
        return true;
      }
      if (getFieldContentStr('nlp_prereq') != null) {
        return true;
      }
      if (getFieldContentStr('nlp_materials') != null) {
        return true;
      }
      if (getFieldContentStr('nlp_modifications') != null) {
        return true;
      }
      if (getFieldContentStr('nlp_reflection') != null) {
        return true;
      }
      return false;
    }

    function wysiwygIsDirty(wysiwyg_id_str) {
        var wysiwyg_o = tinyMCE.getInstanceById(wysiwyg_id_str);
        return ((wysiwyg_o != null) &amp;&amp; wysiwyg_o.isDirty());
    }

    function formatTextareasIntoWikiText() {            
        var slp_str = '';       // the string we concat into the TextAssetClass contents
      var title_markup_str = '*';
      var vert_break_str = '\\\\\n\n'
      {
        var form_summary = getFieldContentStr('nlp_summary');
        if (form_summary != null) {
          slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("celp.step2.summary.title")' + title_markup_str +  vert_break_str + form_summary;
        }
      }
      {
        var form_lasting_ideas = getFieldContentStr('nlp_lasting_ideas');
        if (form_lasting_ideas != null) {
          slp_str=((slp_str!='')?(slp_str+vert_break_str):'')+title_markup_str+'$msg.get("celp.step2.lasting_ideas.title")'+title_markup_str+vert_break_str+form_lasting_ideas;
        }
      }
      {
        var form_essential_question = getFieldContentStr('nlp_essential_question');
        if (form_essential_question != null) {
          slp_str=((slp_str!='')?(slp_str+vert_break_str):'')+title_markup_str+'$msg.get("celp.step2.essential_question.title")'+title_markup_str+vert_break_str+form_essential_question;
        }
      }
      {
        var form_outcomes = getTableText(0);
        if (form_outcomes != null) {
          slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("celp.step2.outcomes.title")' + title_markup_str +  vert_break_str + form_outcomes;
        }
      }
      {
        var form_standards = getWysiwygFieldContent('mce_editor_0', 'nlp_standards');
        if (form_standards != null) {
          slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("celp.step2.standards.title")' + title_markup_str +  vert_break_str + form_standards;
        }
      }
      {
        var form_assess = getTableText(1);
        if (form_assess != null) {
          slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("celp.step2.assess.title")' + title_markup_str +  vert_break_str + form_assess;
        }
      }
      {
        var form_prereq = getFieldContentStr('nlp_prereq');
        if (form_prereq != null) {
          slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("celp.step2.prereq.title")' + title_markup_str +  vert_break_str + form_prereq;
        }
      }
      {
        var form_procedures = getWysiwygFieldContent('mce_editor_1', 'nlp_procedures');
        if (form_procedures != null) {
          slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("celp.step2.procedures.title")' + title_markup_str +  vert_break_str + form_procedures;
        }
      }
      {
        var form_materials = getFieldContentStr('nlp_materials');
        if (form_materials != null) {
          slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("celp.step2.materials.title")' + title_markup_str +  vert_break_str + form_materials;
        }
      }
      {
        var form_modifications = getFieldContentStr('nlp_modifications');
        if (form_modifications != null) {
          slp_str=((slp_str!='')?(slp_str+vert_break_str):'')+title_markup_str+'$msg.get("celp.step2.modifications.title")'+title_markup_str+vert_break_str+form_modifications;
        }
      }
      {
        var file_list = getAttachmentsNames();
        if (file_list.length &gt; 0) {
          slp_str=((slp_str!='')?(slp_str+vert_break_str):'')+title_markup_str+'$msg.get("wq.required.attachments.title")'+title_markup_str+vert_break_str+'#'+'currikiattachmentBegin()\n';
          for (var idx = 0; (idx &lt; file_list.length); idx++) {
            // for macro currikiattachment($fname) see web/src/main/webapp/skins/curriki8/macros.vm
            slp_str = slp_str + '#' + 'currikiattachment("' + file_list[idx] + '")\n';
          }
          slp_str = slp_str + '#' + 'currikiattachmentEnd()\n' + vert_break_str;
        }
      }
      {
        var form_reflection = getFieldContentStr('nlp_reflection');
        if (form_reflection != null) {
          slp_str = ((slp_str != '') ? (slp_str + vert_break_str) : '') + title_markup_str + '$msg.get("celp.step2.reflection.title")' + title_markup_str +  vert_break_str + form_reflection;
        }
      }
      return (slp_str);
    }
    function setTextAssetToWikiText(str) {
      var input_field_TextAssetClass_o = $('CurrikiCode.TextAssetClass_0_text');
      if (input_field_TextAssetClass_o != null) {
        input_field_TextAssetClass_o.value = str;
      }
      else { alert('error in setTextAssetToWikiText()'); }
    }
    function getFieldContentStr(field_id_str) {
      var field_content_o   = $(field_id_str);
      var field_content_str = (field_content_o==null) ? "" : field_content_o.value;
      if ((field_content_str.length &lt; 1) || (field_content_str.trim() == '')) {
        return (null);
      }
      else {
        return (field_content_str);
      }
    }
    // get wysiwyg contents... returns null if no content, else string of
    // wikitext.  if wysiwyg_id_str WYSIWYG is not created due to platform or
    // browser issues, fallback to using values in textarea assoc'd with
    // wysiwyg (in which case plaintext, not wikitext).
    function getWysiwygFieldContent(wysiwyg_id_str, textarea_fallback_id_str) {
      var wysiwyg_content_o = tinyMCE.getInstanceById(wysiwyg_id_str); // WYSIWYG Associated with "Content"
      if (wysiwyg_content_o == null) { // no WYSIWYG--&gt;falback to textarea contents...
        var wysiwyg_content_txt  = $(textarea_fallback_id_str).value;
        if ((wysiwyg_content_txt.length &lt;= 1) || (wysiwyg_content_txt.trim() == '')) {
          return null;     // --&gt; return signal for empty fallback textarea contents
        }
        else {
          return wysiwyg_content_txt; // return fallback textarea contents
        }
      }
      else if (!wysiwyg_content_o.isDirty()) { // WYSIWYG exists but empty...
        return null;        // --&gt; return signal for empty contents
      }
      else {            // WYSIWYG exists with content...
        return (tinyMCE.getContent(wysiwyg_id_str));
      }
    }
    function setSuccessMessage(str) {
      var input_field_successMessage_o = $('successMessage');
      if (input_field_successMessage_o != null) {
        input_field_successMessage_o.value = str;
      }
      else { alert('error in setSuccessMessage()'); }
    }
    function appendSeparatedErrorMessageStr(message_str, missed_field_err_str) {
      return(message_str + '\n\t\t' + missed_field_err_str);
    }
    var needUnloadDialog = false;
    function clearUnloadDialog() {
      needUnloadDialog = false;
    }
    function onWindowUnloading(e) {
      // if the form is not "dirty" don't pop form.leaving.dialog
      if (needUnloadDialog &amp;&amp; checkCELPDirty()) {
        e.browserEvent.returnValue = '$msg.get("form.leaving.dialog")';
      }
    }
    function setUnloadDialog() {
      // window.onbeforeunload = unloadDialog;
      Ext.EventManager.on(window, 'beforeunload', onWindowUnloading); 
      needUnloadDialog = true;
    }
    function getAttachmentsSize() {
      return (window.frames['attachment_iframe'].getAttachmentsSize());
    }
    function getAttachmentsNames() {
      return (window.frames['attachment_iframe'].getAttachmentsNames());
    }
    function setAttachmentsIframeSize() {
      var iframe_o = document.getElementById('attachment_iframe');
      try {
        if (iframe_o != null) {
          iframe_o.height = iframe_o.style.height = 50;  // attempt reset because FF behavior is grow-only
        }
        // this is portable way of getting at iframe DOM content per
        // http://www.mabaloo.com/Web-Development/Creating-controlling-and-manipulating-an-Iframe-through-JavaScript.html
        var doc_o = (iframe_o.contentWindow || iframe_o.contentDocument);  
        if (doc_o.document) {
          doc_o = doc_o.document;
        }
        // the iframe needs more space than 'scrollHeight' says, or we get
        // scrollbars. 5 seems to accomodate the inner and outer margin, and
        // inner and outer border, with one pixel for the margin itself.
        // nb: iframe_o.style.height only works in IE, does nothing in FF.
        // do em both for good measure?!
        if (iframe_o != null) {
           if (Ext.isIE6) {
             iframe_o.height = iframe_o.style.height = doc_o.body.scrollHeight * 2 + 5;
           } else {
             iframe_o.height = iframe_o.style.height = doc_o.body.scrollHeight + 5;
           }
        }
      } catch(e) {
        if (iframe_o != null) {
          iframe_o.height = iframe_o.style.height = 300; // bigger default height value if things go wrong
        }
      } 
    }
    &lt;/script&gt;
    &lt;style type="text/css"&gt;
    body.p-CreateResources-CurrikiExtendedLessonPlan .x-grid3-header {background:#93c53c;}
    body.p-CreateResources-CurrikiExtendedLessonPlan .x-grid3-header span img {margin: -4px 0 -4px 4px;}
    body.p-CreateResources-CurrikiExtendedLessonPlan .x-grid3-scroller .x-grid3-row {border-color: #ccc; border-top:none;}
    body.p-CreateResources-CurrikiExtendedLessonPlan .x-grid3-scroller {margin-bottom:5px;}
    body.p-CreateResources-CurrikiExtendedLessonPlan input[type="button"] {font-weight:normal;}
    .x-grid3-hd-0{text-align:center;}
    .x-grid3-hd-1{text-align:center;}
    .x-grid3-hd-2{text-align:center;}
    .x-grid3-hd-3{text-align:center;}
    .x-grid3-hd-4{text-align:center;}
    .x-grid3-td-0{border-right: 1px solid lightgrey; padding-left: 0px !important;padding-right: 0px !important}
    .x-grid3-td-1{border-right: 1px solid lightgrey; padding-left: 0px !important;padding-right: 0px !important}
    .x-grid3-td-2{border-right: 1px solid lightgrey; padding-left: 0px !important;padding-right: 0px !important}
    .x-grid3-td-3{border-right: 1px solid lightgrey; padding-left: 0px !important;padding-right: 0px !important}
    .x-grid3-td-4{padding-left: 0px !important;padding-right: 0px !important}
    .x-grid3-col-0{white-space: normal; word-wrap:break-word;}
    .x-grid3-col-1{white-space: normal; word-wrap:break-word;}
    .x-grid3-col-2{white-space: normal; word-wrap:break-word;}
    .x-grid3-col-3{white-space: normal; word-wrap:break-word;}
    .x-grid3-col-4{white-space: normal; word-wrap:break-word;}
    .x-form-field-ace{overflow:hidden}
    input { width:expression(this.type=="text" ? "83%" : "style"); }
    &lt;/style&gt;
    &lt;script type="text/javascript" src="/xwiki/resources/js/yui/yahoo/yahoo-min.js" &gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="/xwiki/resources/js/yui/treeview/treeview-min.js" &gt;&lt;/script&gt;
    &lt;script type="text/javascript" src="/xwiki/resources/js/yui/treeview/checknode.js"&gt;&lt;/script&gt;
    &lt;script&gt;
    // ----------------------------------- override YUI checknode method -------------------
    /**
     * jsj add
     * Invoked when the user press space key
     */
    YAHOO.widget.CheckNode.prototype.getKeyCheck = function() {
      return " if( 32 == (window.event ? event.keyCode : event.which) ){ "+"YAHOO.widget.TreeView.getNode(\'" + this.tree.id + "\'," +
          this.index + ").checkClick();"+"if (event.preventDefault) event.preventDefault( ); else event.returnValue = false;}";
    };
    // Overrides YAHOO.widget.TextNode
    YAHOO.widget.CheckNode.prototype.getNodeHtml = function() {
      // this.logger.log("Generating html");
      var sb = new Array();
      sb[sb.length] = '&lt;table border="0" cellpadding="0" cellspacing="0"&gt;';
      sb[sb.length] = '&lt;tr&gt;';
      for (i=0;i&lt;this.depth;++i) {
        sb[sb.length] = '&lt;td class="' + this.getDepthStyle(i) + '"&gt;&amp;#160;&lt;/td&gt;';
      }
      sb[sb.length] = '&lt;td';
      sb[sb.length] = ' id="' + this.getToggleElId() + '"';
      sb[sb.length] = ' class="' + this.getStyle() + '"';
      if (this.hasChildren(true)) {
        sb[sb.length] = ' onmouseover="this.className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getHoverStyle()"';
        sb[sb.length] = ' onmouseout="this.className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getStyle()"';
      }
      sb[sb.length] = ' onclick="javascript:' + this.getToggleLink() + '"&gt;&amp;#160;';
      sb[sb.length] = '&lt;/td&gt;';
      // check box
      sb[sb.length] = '&lt;td';
      sb[sb.length] = ' id="' + this.getCheckElId() + '"';
      sb[sb.length] = ' class="' + this.getCheckStyle() + '"';
      sb[sb.length] = ' onclick="javascript:' + this.getCheckLink() + '"&gt;';
      sb[sb.length] = '&amp;#160;&lt;/td&gt;';
      sb[sb.length] = '&lt;td&gt;';
      sb[sb.length] = '&lt;a';
      sb[sb.length] = ' id="' + this.labelElId + '"';
      sb[sb.length] = ' class="' + this.labelStyle + '"';
      sb[sb.length] = ' href="' + this.href + '"';
      sb[sb.length] = ' target="' + this.target + '"';
      if (this.hasChildren(true)) {
        sb[sb.length] = ' onmouseover="document.getElementById(\'';
        sb[sb.length] = this.getToggleElId() + '\').className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getHoverStyle()"';
        sb[sb.length] = ' onmouseout="document.getElementById(\'';
        sb[sb.length] = this.getToggleElId() + '\').className=';
        sb[sb.length] = 'YAHOO.widget.TreeView.getNode(\'';
        sb[sb.length] = this.tree.id + '\',' + this.index +  ').getStyle()"';
      }
      sb[sb.length] = ' onkeypress="javascript:' + this.getKeyCheck(this.event)+'"&gt;';
      //sb[sb.length] = '&gt;';
      sb[sb.length] = this.label;
      sb[sb.length] = '&lt;/a&gt;';
      sb[sb.length] = '&lt;/td&gt;';
      sb[sb.length] = '&lt;/tr&gt;';
      sb[sb.length] = '&lt;/table&gt;';
      return sb.join("");
    };
    var grids=[]; // table
    // ------------------------------------ extend extjs ------------------------------------
    Ext.apply(Ext.grid.GridView.prototype,{
        // remove red triangles
      doRender : function(cs, rs, ds, startRow, colCount, stripe){
        var ts = this.templates, ct = ts.cell, rt = ts.row, last = colCount-1;
        var tstyle = 'width:'+this.getTotalWidth()+';';
        var buf = [], cb, c, p = {}, rp = {tstyle: tstyle}, r;
        for(var j = 0, len = rs.length; j &lt; len; j++){
          r = rs[j]; cb = [];
          var rowIndex = (j+startRow);
          for(var i = 0; i &lt; colCount; i++){
            c = cs[i];
            p.id = c.id;
            p.css = i == 0 ? 'x-grid3-cell-first ' : (i == last ? 'x-grid3-cell-last ' : '');
            p.attr = p.cellAttr = "";
            p.value = c.renderer(r.data[c.name], p, r, rowIndex, i, ds);
            p.style = c.style;
            if(p.value == undefined || p.value === "") p.value = "&amp;#160;";
            cb[cb.length] = ct.apply(p);
          }
          var alt = [];
          if(stripe &amp;&amp; ((rowIndex+1) % 2 == 0)){
            alt[0] = "x-grid3-row-alt";
          }
          if(r.dirty){
            alt[1] = " x-grid3-dirty-row";
          }
          rp.cols = colCount;
          if(this.getRowClass){
            alt[2] = this.getRowClass(r, rowIndex, rp, ds);
          }
          rp.alt = alt.join(" ");
          rp.cells = cb.join("");
          buf[buf.length] =  rt.apply(rp);
        }
        return buf.join("");
      },
      focusCell : function(row, col, hscroll){
        row = Math.min(row, Math.max(0, this.getRows().length-1));
        var xy = this.ensureVisible(row, col, hscroll);
        this.focusEl.setXY(xy||this.scroller.getXY());
        if(Ext.isGecko){
         // this.focusEl.focus();
        }else{
         // this.focusEl.focus.defer(1, this.focusEl);
        }
      },
      // private
      layout : function(){
        if(!this.mainBody){
          return; // not rendered
        }
        var g = this.grid;
        var c = g.getGridEl();
        var csize = c.getSize(true);
        var vw = csize.width;
        if(vw &lt; 20 || csize.height &lt; 20){ // display: none?
          return;
        }
        if(g.autoHeight){
          this.scroller.dom.style.overflow = 'hidden';
        }else{
          this.el.setSize(csize.width, csize.height);
          var hdHeight = this.mainHd.getHeight();
          var vh = csize.height - (hdHeight);
          this.scroller.setSize(vw, vh);
          if(this.innerHd){
            this.innerHd.style.width = (vw)+'px';
          }
        }
        if(this.forceFit){
          if(this.lastViewWidth != vw){
            this.fitColumns(false, false);
            this.lastViewWidth = vw;
          }
        }else{
          this.autoExpand();
          this.syncHeaderScroll();
        }
        this.onLayout(vw, vh);
      }
    });
    Ext.apply(Ext.grid.EditorGridPanel.prototype,{
      // multi-lines wrapper and clear default value
      preEditValue : function(r, field){
        var value = r.data[field];
        if(!r.dirty||(r.dirty &amp;&amp; typeof r.modified[field] == 'undefined')){
          value='';
        }else if(typeof value == 'string'){
          value=value.replace(/&lt;br\/&gt;/gi,'\r\n');
          value=this.autoEncode ? Ext.util.Format.htmlDecode(value) : value;
        }
        return value;
      },
      postEditValue : function(value, originalValue, r, field){
        if(typeof value == 'string'){
          value=this.autoEncode ? Ext.util.Format.htmlEncode(value) : value;
          value=value.replace(/\r\n/gi,"&lt;br/&gt;").replace(/\n/gi,'&lt;br/&gt;');
        }
        delete Ext.currentCellNode;
        return value;
      }
    });
    Ext.apply(Ext.grid.GridEditor.prototype, {
      // set auto size
      autoSize: true,
      doAutoSize : function(){
        if(this.autoSize){
          var parentNode=this.boundEl.dom.parentNode;
          var width=parentNode.clientWidth;
          var height=parentNode.clientHeight;
          switch(this.autoSize){
            case "width":
              this.setSize(width,  "");
              break;
            case "height":
              this.setSize("",  height-1);
            break;
            default:
                this.setSize(width,  height-1);
          }
          Ext.currentCellNode=parentNode;
        }
      }
    });
    Ext.apply(Ext.form.TextArea.prototype, {
        // auto size cell
      onKeyUpBuffered : function(e){
          if(!e.isNavKeyPress()||e.getKey()==e.ENTER){
            this.autoSize();
          } else if (e.isNavKeyPress()) {
            if (grids[this.gridIndex].isJumpToNext) {
              grids[this.gridIndex].clickTabToNextNum = grids[this.gridIndex].clickTabToNextNum + 1;
              if (grids[this.gridIndex].clickTabToNextNum == 2) {
                grids[this.gridIndex].isJumpToNext = false;
                grids[this.gridIndex].clickTabToNextNum = 0;
                document.getElementById("addRowBtn_"+this.gridIndex).focus();
              }
            } else if (grids[this.gridIndex].isJumpToPre) {
              grids[this.gridIndex].clickTabToPreNum = grids[this.gridIndex].clickTabToPreNum + 1;
              if (grids[this.gridIndex].clickTabToPreNum == 2) {
                grids[this.gridIndex].isJumpToPre = false;
                grids[this.gridIndex].clickTabToPreNum = 0;
                document.getElementById(this.gridIndex==0?'nlp_essential_question':'nlp_standards').focus();
              }
            }
          }
      },
      autoSize : function(){
        if(!this.grow || !this.textSizeEl){
          return;
        }
        var el = this.el;
        var v = el.dom.value;
        var ts = this.textSizeEl;
        ts.innerHTML = '';
        ts.appendChild(document.createTextNode(v));
        v = ts.innerHTML;
        Ext.fly(ts).setWidth(this.el.getWidth());
        if(v.length &lt; 1){
          v = "&amp;#160;&amp;#160;";
        }else{
          if(Ext.isIE){
            v = v.replace(/\n/g, '&lt;p&gt;&amp;#160;&lt;/p&gt;');
          }
          v += this.growAppend;
        }
        ts.innerHTML = v;
        var h = Math.min(this.growMax, Math.max(ts.offsetHeight, this.growMin)+this.growPad);
        if(h != this.lastHeight){
          if(Ext.currentCellNode){
            if(h&gt;Ext.currentCellNode.clientHeight){
              this.lastHeight = h;
              this.el.setHeight(h);
              this.fireEvent("autosize", this, h);
              if(Ext.isIE){
                Ext.currentCellNode.style.height=h;
              }else{
                Ext.currentCellNode.setStyle('height:'+h+'px');
              }
            }
          }else{
            this.lastHeight = h;
            this.el.setHeight(h);
            this.fireEvent("autosize", this, h);
          }
        }
      }
    });
    // ------------------------------------ edit grid definition ------------------------------------
    var grid_config=[{
      renderTo:'outcomes_div',
      cols:['s_able','s_know'],
      header:['$msg.get("celp.step2.outcomes.row1.col1_header")','$msg.get("celp.step2.outcomes.row1.col2_header")'],
      data:[
        {id:1,s_able:'$msg.get("celp.step2.outcomes.row2.col1_sample")',s_know:'$msg.get("celp.step2.outcomes.row2.col2_sample")'},
        {id:1,s_able:'',s_know:''},
        {id:1,s_able:'',s_know:''}
      ],
      rows0:['$msg.get("celp.step2.outcomes.row2.col1_sample")','$msg.get("celp.step2.outcomes.row2.col2_sample")'],
      preEl:'nlp_essential_question',
      nextEl:'addRowBtn_0'
    },{
      renderTo:'assess_div',
      cols:['tasks','criteria'],
      header:['$msg.get("celp.step2.assess.row1.col1_header")','$msg.get("celp.step2.assess.row1.col2_header")'],
      data:[
        {id:1,tasks:'$msg.get("celp.step2.assess.row2.col1_sample")',criteria:'$msg.get("celp.step2.assess.row2.col2_sample")'},
        {id:1,tasks:'',criteria:''},
        {id:1,tasks:'',criteria:''}
      ],
      rows0:['$msg.get("celp.step2.assess.row2.col1_sample")','$msg.get("celp.step2.assess.row2.col2_sample")'],
      preEl:'nlp_standards',
      nextEl:'addRowBtn_1'
    }];
    function cellClick(obj, row, col, e){
      var record = obj.store.getAt(row);
      var index=obj.store.gridIndex;
      if(row == 0){
        if(col==0&amp;&amp;record.get(grid_config[index].cols[0])==grid_config[index].rows0[0]){
          record.set(grid_config[index].cols[0], "");
        }else if(col==1&amp;&amp;record.get(grid_config[index].cols[1])==grid_config[index].rows0[1]){
          record.set(grid_config[index].cols[1], "");
        }
      }
    }
    function afterEdit(obj, row, col, e){
    //    var r=obj.record;
    //    var id=r.get("id");
    //    var name=r.get("name");
    }
    // insert new row
    function addrow(index){
      grids[index].store.loadData([{id:1}], true);
      return false;
    }
    function checkTableText(index){
      var arr = grids[index].store.data;
      for(i=0;i&lt;arr.length;i++){
        var record = grids[index].store.getAt(i);
        if(record.get(grid_config[index].cols[0]) != "" || record.get(grid_config[index].cols[1]) != ""){
          return true;
        }
      }
      return false;
    }   
    function formatTableString(str){
      str = str.replace(/&lt;br\/&gt;/gi,'\r\n');
      str = Ext.util.Format.htmlDecode(str);
      str = formatString(str, /#/g, "&amp;#35;");
      str = formatString(str, /1/g, "&amp;#49;");
      str = formatString(str, /\*/g, "&amp;#42;");
      str = formatString(str, /a/g, "&amp;#97;");
      str = formatString(str, /A/g, "&amp;#65;");
      str = formatString(str, /i/g, "&amp;#105;");
      str = formatString(str, /I/g, "&amp;#73;");
      str = formatString(str, /g/g, "&amp;#103;");
      str = formatString(str, /h/g, "&amp;#104;");
      str = formatString(str, /k/g, "&amp;#107;");
      str = formatString(str, /_/g, "&amp;#95;");
      str = formatString(str, /~/g, "&amp;#126;");
      str = formatString(str, /-/g, "&amp;#45;");
      str = formatString(str, /{/g, "&amp;#123;");
      str = formatString(str, /}/g, "&amp;#125;");
      str = formatString(str, /\(/g, "&amp;#40;");
      str = formatString(str, /\)/g, "&amp;#41;");
      str = formatString(str, /\|/g, "&amp;#124;");
      str = formatString(str, /\$/g, "&amp;#36;");
      str = formatString(str, /@/g, "&amp;#64;");
      str = formatString(str, /\[/g, "&amp;#91;");
      str = formatString(str, /\]/g, "&amp;#93;");
      str = formatString(str, /&lt;/g, "&amp;#60;");
      str = formatString(str, /&gt;/g, "&amp;#62;");
      str = str.replace(/\r\n/gi,"\\\\")
      return str;
    }
    function formatString(str, reg, repls){
      return str.replace(reg, repls)
    }
    function getTableText(index){
      var str = '\{table\}';
      str += grid_config[index].header[0] + ' | ' + grid_config[index].header[1] + ' \r\n';
      var arr = grids[index].store.data;
      for(i=0;i&lt;arr.length;i++){
        var empty_row=true;
        var record = grids[index].store.getAt(i);
        var col0 = record.get(grid_config[index].cols[0]);
        var col1 = record.get(grid_config[index].cols[1]);
        col0 = formatTableString(col0);
        if(col0!=""){
          empty_row=false;
        }
        col0 = (col0 == "" ? "&amp;#160;" : col0);
        col1 = formatTableString(col1);
        if(col1!=""){
          empty_row=false;
        }
        col1 = (col1 == "" ? "&amp;#160;" : col1);
        if(!empty_row){
          str += col0 + ' | ' + col1 + ' \r\n';
        }
      }
      str += '\{table\}';
      return str;
    }
    function initGrid(index){
      grids[index] = new Ext.grid.EditorGridPanel({
        renderTo:grid_config[index].renderTo,
        title:"",
        height:200,
        width:570,
        cm:new Ext.grid.ColumnModel([{
            id:"0",
            header:grid_config[index].header[0],
            dataIndex:grid_config[index].cols[0],
            sortable:false,
            fixed:true,
            width:285,
            menuDisabled:true,
            editor:new Ext.form.TextArea({gridIndex:index,grow:true,fieldClass:'x-form-field-ace'})
          },{
            id:"1",
            header:grid_config[index].header[1],
            dataIndex:grid_config[index].cols[1],
            sortable:false,
            fixed:true,
            width:285,
            menuDisabled:true,
            editor:new Ext.form.TextArea({gridIndex:index,grow:true,fieldClass:'x-form-field-ace'})
          }]),
        store:new Ext.data.JsonStore({
          gridIndex:index,
          data:grid_config[index].data,
          fields:["id",grid_config[index].cols[0],grid_config[index].cols[1]]}),
        autoExpandColumn:1,
        clicksToEdit:1,
        autoHeight:true,
        autoEncode:true,
        cls :' x-form-field-ace;',
        viewConfig: {scrollOffset: 2},
        fitContainer: true
      });
      grids[index].clickTabToNextNum=0;
      grids[index].clickTabToPreNum=0;
      grids[index].clickTabInGridToNextNum=0;
      grids[index].clickTabInGridToPreNum=0;
      grids[index].on("cellclick", this.cellClick);
      grids[index].on("afteredit",this.afterEdit,this);
      grids[index].addListener("keyDown", function(e){
        if (e.isNavKeyPress()) {
          if (grids[index].isJumpToNext) {
            grids[index].clickTabInGridToNextNum = grids[index].clickTabInGridToNextNum + 1;
            if (grids[index].clickTabInGridToNextNum == 2) {
              grids[index].isJumpToNext = false;
              grids[index].clickTabInGridToNextNum = 0;
              document.getElementById("addRowBtn_0").focus();
            }
          } else if (grids[index].isJumpToPre) {
            grids[index].clickTabInGridToPreNum = grids[index].clickTabInGridToPreNum + 1;
            if (grids[index].clickTabInGridToPreNum == 2) {
              grids[index].isJumpToPre = false;
              grids[index].clickTabInGridToPreNum = 0;
              document.getElementById('nlp_essential_question').focus();
            }
          }
        } 
      });
      grids[index].getSelectionModel().on("cellselect", function(sel, row, col) {
        curRow = row;curCol = col;
        if (row !=0 &amp;&amp; col !=0 &amp;&amp; row == grids[index].getStore().getCount()-1 &amp;&amp; col == grids[index].getColumnModel().getColumnCount()-1) {
          grids[index].isJumpToNext = true;
        } else {
          grids[index].isJumpToNext = false;
        }
        if (row == 0 &amp;&amp; col == 0) {
          grids[index].isJumpToPre = true;
        } else {
          grids[index].isJumpToPre = false;
        }
      });
    }
    // Desired Learner Outcomes
    Ext.onReady(function(){
      initGrid(0);
    });
    // Summative Assessment(s)
    Ext.onReady(function(){
      initGrid(1);
    });
    &lt;/script&gt;
    {/pre}
    #################################### JS end , title
    #set( $noDialogs = $request.getParameter("noDialogs") )  ## ?noDialogs=1 turns off add-path dialogs, for testing, or to enable "edit-again"
    &lt;div class="header"&gt;
    #curriki_formtitle($msg.get("celp.title.title"))
    $msg.get("celp.title.description") &lt;a href="$msg.get('celp.title.description.link1.url')" target="_blank"&gt;$msg.get("celp.title.description.link1")&lt;/a&gt;
    &lt;span class="separator"&gt;&amp;nbsp;|&amp;nbsp;&lt;/span&gt;
    &lt;a href="$msg.get('celp.title.description.link2.url')" target="_blank"&gt;$msg.get("celp.title.description.link2")&lt;/a&gt;
    &lt;span class="separator"&gt;&amp;nbsp;|&amp;nbsp;&lt;/span&gt;
    &lt;a href="$msg.get('celp.title.description.link3.url')"&gt;&lt;img src="$msg.get('celp.title.description.link3.thumbnail')" align="middle"&gt;$msg.get("celp.title.description.link3")&lt;/a&gt;
    &lt;br/&gt;$msg.get("form.required.fields.instruction")
    &lt;/div&gt;
    &lt;form action="" class="curriki-form1" id="inline" method="post"&gt;
    &lt;input type="hidden" name="xredirect" value="$xwiki.getFormEncoded($xwiki.getRequestURL())"/&gt;
    ##sign validation result, default is validate not passed
    &lt;input type="hidden" name="CurrikiCode.TextAssetClass_0_text" id="CurrikiCode.TextAssetClass_0_text" value="$msg.get('form.done.wysiwyg.error.wikitext')"/&gt;
    &lt;input type="hidden" name="CurrikiCode.TextAssetClass_0_type" id="CurrikiCode.TextAssetClass_0_type" value="0"/&gt;
    ## this ICT2 is no use now
    ##&lt;input type="hidden" name="CurrikiCode.AssetClass_0_instructional_component2" id="CurrikiCode.AssetClass_0_instructional_component2" value="curriculum_lp"/&gt;
    &lt;input type="hidden" name="CurrikiCode.AssetClass_0_category" id="CurrikiCode.AssetClass_0_category" value="text"/&gt;
    ## successMessage is null, validation not passed
    &lt;input type="hidden" name="successMessage" id="successMessage" value=""/&gt;
    &lt;input type="hidden" name="page" value="$!request.page"/&gt;
    &lt;input type="hidden" name="pageName" value="$!newAsset.fullName"/&gt;
    &lt;input type="hidden" name="publishSpace" value="$!publishSpace"/&gt;
    &lt;input type="hidden" name="parentPage" value="$!parentPage"/&gt;
    #if("$!noDialogs"!="")
      &lt;input type="hidden" name="noDialogs" value="$noDialogs"/&gt;
    #else
      &lt;input type="hidden" name="flow" value="$!flow"/&gt;
      &lt;input type="hidden" name="createLessonURL" value="$msg.get('celp.url')"/&gt; ## for ICT
      ## this is the real ICT value
      &lt;input type="hidden" name="CurrikiCode.AssetClass_0_instructional_component" id="CurrikiCode.AssetClass_0_instructional_component" value="curriculum_lp"/&gt;
      &lt;input type="hidden" name="cameFrom" #if( "$!cameFrom"=="" ) value="$msg.get('celp.url')" #else value="$!cameFrom" #end/&gt;
    #end
    #################################### step1 
    #curriki_formpart_begin($msg.get("celp.step1.header"))
    #curriki_forminstructions($msg.get("celp.step1.instruction"))
    #curriki_formprompt($msg.get("celp.step1.title_title"), $msg.get("celp.step1.title_tooltip"), $msg.get("celp.step1.title_txt"), true, "medium")
    &lt;input type="text" id="CurrikiCode.AssetClass_0_title" name="CurrikiCode.AssetClass_0_title" maxlength="$msg.get("resource.title.maxlength")" /&gt;
    #curriki_formprompt($msg.get("celp.step1.description_title"), $msg.get("celp.step1.description_tooltip"), $msg.get("celp.step1.description_txt"), true, "medium")
    $newAsset.display("description","edit")
    &lt;table class="subject-educational"&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td&gt;
    #curriki_formprompt($msg.get("sri.fw_items_title"), $msg.get("sri.fw_items_tooltip"), $msg.get("sri.fw_items_txt"), true, "")
    $newAsset.display("fw_items","edit")
    &lt;/td&gt;&lt;td&gt;
    #curriki_formprompt($msg.get("sri.educational_level_title"), $msg.get("sri.educational_level_tooltip"), $msg.get("sri.educational_level_txt"), true, "medium")
    $newAsset.display("educational_level","edit")
    &lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt; ##class="subject-educational"
    #curriki_formprompt($msg.get("sri.keywords_title"), $msg.get("sri.keywords_tooltip"), $msg.get("sri.keywords_txt"), false, "medium")
    $newAsset.display("keywords","edit")
    #curriki_formprompt($msg.get("sri.language_title"), $msg.get("sri.language_tooltip"), $msg.get("sri.language_txt"), false, "medium")
    $newAsset.display("language","edit")
    #curriki_formpart_end() 
    #################################### step2
    #curriki_formpart_begin($msg.get("celp.step2.header")) ## {
    #curriki_forminstructions($msg.get("celp.step2.instruction1"))
    ##Summary:
    #curriki_formprompt($msg.get("celp.step2.summary.title"), $msg.get("celp.step2.summary.tooltip"), $msg.get("celp.step2.summary.instruction"), false, "medium")
    &lt;textarea id="nlp_summary" name="nlp_summary"&gt;&lt;/textarea&gt;
    ##Lasting Ideas &amp; Results:
    #curriki_formprompt($msg.get("celp.step2.lasting_ideas.title"), "", $msg.get("celp.step2.lasting_ideas.instruction"), false, "medium")
    &lt;textarea id="nlp_lasting_ideas" name="nlp_lasting_ideas"&gt;&lt;/textarea&gt;
    ##Essential Questions:
    #curriki_formprompt($msg.get("celp.step2.essential_question.title"), "", $msg.get("celp.step2.essential_question.instruction"), false, "medium")
    &lt;textarea id="nlp_essential_question" name="nlp_essential_question"&gt;&lt;/textarea&gt;
    ##Desired Learner Outcomes:
    #curriki_formprompt($msg.get("celp.step2.outcomes.title"), "", $msg.get("celp.step2.outcomes.instruction"), true, "medium")
    &lt;div id="outcomes_div"&gt;&lt;/div&gt;
    &lt;button class="button-orange" id="addRowBtn_0" onclick="return addrow(0);"&gt;$msg.get("ace.lesson.plan.procedures.addrow")&lt;/button&gt;
    ##Standards:
    #curriki_formprompt($msg.get("celp.step2.standards.title"), "", $msg.get("celp.step2.standards.instruction"), false, "medium")
    &lt;textarea id="nlp_standards" name="nlp_standards"&gt;&lt;/textarea&gt;  ## in JS, this is replaced w/ WYSIWYG
    #curriki_forminstructions($msg.get("celp.step2.instruction2"))
    ##Summative Assessment(s):
    #curriki_formprompt($msg.get("celp.step2.assess.title"), $msg.get("celp.step2.assess.tooltip"), $msg.get("celp.step2.assess.instruction"), true, "medium")
    &lt;div id="assess_div"&gt;&lt;/div&gt;
    &lt;button class="button-orange" id="addRowBtn_1" onclick="return addrow(1);"&gt;$msg.get("ace.lesson.plan.procedures.addrow")&lt;/button&gt;
    #curriki_forminstructions($msg.get("celp.step2.instruction3"))
    ##Pre-Requisite Knowledge &amp; Skills:
    #curriki_formprompt($msg.get("celp.step2.prereq.title"), $msg.get("celp.step2.prereq.tooltip"), $msg.get("celp.step2.prereq.instruction"), false, "medium")
    &lt;textarea id="nlp_prereq" name="nlp_prereq"&gt;&lt;/textarea&gt;
    ##Procedures:
    #curriki_formprompt($msg.get("celp.step2.procedures.title"), $msg.get("celp.step2.procedures.tooltip"), $msg.get("celp.step2.procedures.instruction"), true, "medium")
    &lt;textarea id="nlp_procedures" name="nlp_procedures"&gt;&lt;/textarea&gt;  ## in JS, this is replaced w/ WYSIWYG
    ##Materials:
    #curriki_formprompt($msg.get("celp.step2.materials.title"), $msg.get("celp.step2.materials.tooltip"), $msg.get("celp.step2.materials.instruction"), false, "medium")
    &lt;textarea id="nlp_materials" name="nlp_materials"&gt;&lt;/textarea&gt;
    ##Modifications, Adaptations, &amp; Accommodations:
    #curriki_formprompt($msg.get("celp.step2.modifications.title"), "", $msg.get("celp.step2.modifications.instruction"), false, "medium")
    &lt;textarea id="nlp_modifications" name="nlp_modifications"&gt;&lt;/textarea&gt;
    ## Required Attachments:
    #curriki_formprompt($msg.get("celp.step2.required.attachments.title"), $msg.get("celp.step2.required.attachments.tooltip"), $msg.get("celp.step2.required.attachments.instruction"), false, "")
    &lt;iframe src="$newAsset.getURL("view", "xpage=lpattachments")" onload="try { setAttachmentsIframeSize(); } catch(e) { alert('iframe onload error: '+e+' ...'); return false; }"
    id="attachment_iframe" name="attachment_iframe" width="100%" scrolling="auto" marginheight="0" marginwidth="0"  frameborder="0"&gt;
    &lt;h2&gt;Sorry, your browser doesn't support iframes. Attachment Uploading functionality disabled.&lt;/h2&gt; 
    &lt;/iframe&gt;
    ##Reflection:
    #curriki_formprompt($msg.get("celp.step2.reflection.title"), "", $msg.get("celp.step2.reflection.instruction"), false, "medium")
    &lt;textarea id="nlp_reflection" name="nlp_reflection"&gt;&lt;/textarea&gt;
    #curriki_formpart_end() ## }
    #################################### step3
    #curriki_createresources_step3()
    #################################### step4
    #curriki_formpart_begin($msg.get("celp.step4.header")) 
    &lt;p&gt;&lt;label&gt;$msg.get("celp.step4.instruction")&lt;/label&gt;&lt;/p&gt;
    &lt;p class="links"&gt;
    &lt;button class="button-orange"
		onclick="try { if (document.forms.inline.onsubmit) document.forms.inline.onsubmit(); if (checkWebQuestForm()) { clearUnloadDialog(); startWaitingDialog(); document.forms.inline.action='$msg.get("form.done.url")'; document.forms.inline.submit(); } return false; } catch(e) { alert('$msg.get("form.scratch.submit.button") button onclick error: '+e+' ...'); return false; }"&gt;$msg.get("celp.submit.button")&lt;/button&gt;
    #if( "$!cameFrom" != "" ) 
      #set( $cancelURL = $cameFrom )
    #else 
      #set( $cancelURL = $xwiki.getURL("Main.WebHome") ) ## cameFrom not set means go to WebHome
    #end 
    &lt;button class="cancel" onclick="try { clearUnloadDialog(); window.location.href='$cancelURL'; return false; } catch(e) { alert('$msg.get("form.scratch.cancel.button") button onclick error: '+e+' ...'); return false; }"&gt;$msg.get("celp.cancel.button")&lt;/button&gt;
    &lt;/p&gt;
    #curriki_formpart_end() 
    #####################################################################
    &lt;div class="tooltips"&gt;
    {pre}$xwiki.addTooltipJS(){/pre}
    &lt;/div&gt;
    &lt;/form&gt;
    #set( $noWYSIWYG  = $request.getParameter("noWYSIWYG") ) ##For testing,etc, add parameter ?noWYSIWYG=1 to force WYSIWYG editors to not display, and use TEXTAREA instead
    #if( "$!noWYSIWYG" == "" ) ## {
      #curriki_wysiwyg_loader_preamble()
      #if( "$!publishSpace"=="" )            ## {
        #set( $user = $context.user )
        #if( $user.startsWith("XWiki.") )    ## {
          #set( $shortname = $user.substring(6) )
        #else                                ## } {
          #set( $shortname = $user )
        #end                                 ## }
        #set( $wysi_publishSpace = "Coll_${shortname}" )
      #else ## } {
        #set( $wysi_publishSpace = $publishSpace )
      #end                                   ## }
      #curriki_SLP_wysiwyg_loader_editor("nlp_standards", $newAsset, $wysi_publishSpace)        ## id="mce_editor_0"
      #curriki_SLP_wysiwyg_loader_editor("nlp_procedures", $newAsset, $wysi_publishSpace)        ## id="mce_editor_1"
    #end ## } -- if "$!noWYSIWYG"==""
    {pre}&lt;script language="javascript" type="text/javascript"&gt;
    /* &lt;![CDATA[ */
    /*
     * this javascript code  must be at end, otherwise  strange   things
     * happen, like "License Deed" doesn't show up...
     */
    function startWaitingDialog() {
    #if( "$!noDialogs"!="1" )  ## {
      Curriki.showLoading();
    #end ## }
    }
    /*
     * on window unload, dialog warning of dataloss
     */
    setUnloadDialog();
    /*
     * HACK: Tell TinyMCE to leave-alone the URL's ... they are fine as-is.. as relative links
     * during edit in AssetTemp/xxxxxxx, and as permanent links in $wysi_publishSpace on save
     */
    tinyMCE.convertURL = function(url, node, on_save) { return url; };
    /* ]]&gt; */
    &lt;/script&gt;{/pre}
  #end ## } -- else, aka "$!newAsset"!="" 
#end ## } -- $context.user=="XWiki.XWikiGuest"
</content></xwikidoc>