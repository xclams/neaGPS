<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>AdWordsJump</web>
<name>CreateGAWLPPhaseII</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent>AdWordsJump.WebHome</parent>
<creator>XWiki.creiswig</creator>
<author>XWiki.creiswig</author>
<customClass></customClass>
<contentAuthor>XWiki.creiswig</contentAuthor>
<creationDate>1251577336000</creationDate>
<date>1252577491000</date>
<contentUpdateDate>1266877071000</contentUpdateDate>
<version>1.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>Importé depuis un le XAR</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>AdWordsJump.CreateGAWLPPhaseII</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>51db57ea-a319-4e53-aabe-7338849f0513</guid>
<property>
<tags/>
</property>
</object>
<content>
1 GAWLP Phase II Documentation

1.1 How to create a Landing Page using the Phase II configurable features

In order to achieve the desired flexibility of design, all features were created as JavaScript.  To configure a page, follow these steps:

*Step 1:* Create the page on Curriki
\\
\\

*Step 2:*  Insert the macro call:

{code}
#includeMacros("AdWordsJump.TemplateJs")
{code}

\\

*Step 3:* Select which features you’d like to include from the configuration options below.  For each feature, make sure to define:
* type
* id
* value (if default text should appear)
* any additional html parameters to make the feature look/act the way you want (see for example the emailCheck feature)


*Step 4:* Select the appropriate button based on the features included and define the following:
* type
* id
* value


*Step 5:* Insert the JS statement and edit the features included so that there is 1 line per ID called above; make sure the text within ‘’ after the colon on each line matches the ID for the feature called above. If for any reason you use a feature 2x within the same page, make sure to give them unique IDs.

{code}
&lt;script type="text/javascript" language="javascript"&gt;
    new AdWordJumpPage({
        searchText:'searchText',
        searchTextWrapper:'searchTextWrapper',
        emailCheck:'emailCheck',
        emailCheckWrapper:'emailCheckWrapper',
        email:'email',
        emailWrapper:'emailWrapper',
        autoDecideButton:'autoDecideButton'
    });
&lt;/script&gt;
{code}

If you see a message that says a field is missing when you save out of Edit mode, double check your code. Most likely something is missing (i.e. a comma in the script) or the features are not intended to work in combination with each other.
\\
\\

*Step 6:* Style the page around your features as needed.  

Styling notes:
* You can use any style by yourself with the html element attribute class and style, for example {code}&lt;input type='...' id='...' class='...' style='...'&gt;{code} for instance, you can change basic buttons to the Curriki orange ones by adding in class="button button-orange" (for 1.8.6 release on prod) or class="button-orange" (for 1.8.7 on current/prod)
* If you set the ‘value’ attribute of ‘input’ field, it will be processed as default value for that field.
* Make sure to style while viewing in XPage format (add “?xpage=popup” to the URL)
* If using macros from Registration page, make sure to call the global style sheet
* Someone who is aware of how a macro works and what style tags are used can overwrite the styles in the macro by calling/editing them at the top of the page where the macro is used

\\

*Step 7:* Verify the new page has been added to the log and is storing entries correctly.
\\
\\

1.1 Feature Configuration Options

{table}
value | description | code example
subjectParent | The top level subject to search within; when used this filter will be set in Advanced Search upon submitting the form | {code} &lt;input id='subjectParent' type='hidden' value='...'&gt; {code}
subject | The topic or sub-subject to search within; when used this filter will be set in Advanced Search upon submitting the form | {code} &lt;input id='subject' type='hidden' value='...'&gt; {code}
searchText | Inserts an empty search field into the page; should be a text field.&lt;br&gt; The value attribute has been suppressed on this feature because it was causing a bug (defining a value attribute caused any user-entered text to become the value after refreshing the page); use defaultSearchText instead to define a default value. &lt;br&gt;No validation on this field; to set validation, use allowEmptySearchText. | {code} &lt;input id='searchText' type='text'&gt; {code}
defaultSearchText | Inserts default text into the searchText field. This feature is used to replace the value attribute of searchText because in the old version of that feature, if a user enters some text in the field and refreshes the page, the user-entered text will be regarded as the default value. This option will resolve this problem. | Add this statement to the JS script (no need for an input line with the other html elements): {code}        defaultSearchText:'Enter your search term',{code}
searchTextWrapper | Inserts the red highlight style around the searchText field (and anything else coded within the div) when an error occurs.| The html is a div statement that surrounds the area where the highlight should appear. For instance, in this example the wrapper div appears around the "searchText" feature:  {code} &lt;div id='searchTextWrapper'&gt;&lt;input id='searchText' type='text' value='Enter your search term...'&gt;&lt;/div&gt; {code}
allowEmptySearchText | Only applies to searchText field.  Can be True or False, default is true. If false, validation is added on submission so that searchText cannot be empty. | Add this statement to the JS script (no need for an input line with the other html elements): {code}        allowEmptySearchText:false,  {code}
searchButton | Inserts a submit button that only logs the search term value and goes to the search results page, even if you configure an email entry and enter text in the email; This feature only works in combination with searchText. | {code} &lt;input id='searchButton' type='button' value='Submit'&gt; {code}
searchTextAutoButton | This feature allows you to auto-execute the same action as another button when you press 'enter' on the searchText field. By configuring this feature, it becomes equal to either the searchButton or the autoDecideButton, so the action of pressing ‘enter’ will be same as a mouse click on the autoDecideButton | Add/update this style in your html: {code} &lt;input id='searchTextAutoButton' type='hidden'&gt; {code} &lt;br&gt; Then within the JS script, instead of inserting {code}searchTextAutoButton:'searchTextAutoButton'{code} have the feature call the visible button, i.e. {code}searchTextAutoButton:'autoDecideButton'{code}
emailCheck | Enters a check box to capture the user’s permission. By default the box is un-checked, but can be set to start as checked. When configured with emailButton, user must have checked the box in order for button to be active and be able to submit the email. When configured with searchAndEmailButton or autoDecideButton, email field will be greyed out unless checkbox is checked; onced checked, the user must enter content in the email field in order to submit the page or else will see an error message. | To show checkbox unchecked by default: {code} &lt;input id='emailCheck' type='checkbox'&gt; {code} &lt;br&gt; To show checkbox checked by default: {code} &lt;input id=’emailCheck’ type=’checkbox’ checked&gt; {code}
emailCheckWrapper | Similar to searchTextWrapper. Inserts the red highlight style around the emailCheck field (and anything else coded within the div) when an error occurs. NOTE: this field is pretty much unnecessary because of how error messaging and greyed out text are set up for the email field in combination with the emailCheck feature. | The html is a div statement that surrounds the area where the highlight should appear. For instance, in this example the wrapper div appears around the "emailCheck" feature: {code} &lt;div id='emailCheckWrapper'&gt;&lt;input id='emailCheck' type='checkbox'&gt;&lt;/div&gt; {code}
email | Enters a field to capture an email; should be a text field. The value attribute has been suppressed on this feature because it was causing a bug (defining a value attribute caused any user-entered text to become the value after refreshing the page); use defaultEmailText instead to define a default value. NOTE: when active, this field will always have a validation to ensure the field is not empty; to have a page that allows a search term to be entered without entering an email, you’ll need to configure those fields separately with separate buttons (see the suggested combinations below). | {code} &lt;input id='email' type='text'&gt; {code}
defaultEmailText | Inserts default text into the email field. This feature is used to replace the value attribute of email because in the old version of that feature, if a user enters some text in the field and refreshes the page, the user-entered text will be regarded as the default value. This option will resolve this problem. | Add this statement to the JS script (no need for an input line with the other html elements):{code}        defaultEmailText:'Enter your email address to receive periodic updates', {code} 
emailWrapper | Similar to searchTextWrapper. Inserts the red highlight style around the email field (and anything else coded within the div) when an error occurs. | The html is a div statement that surrounds the area where the highlight should appear. For instance, in this example the wrapper div appears around the "email" feature: {code} &lt;div id='emailWrapper'&gt;&lt;input id='email' type='text' value='Enter your search email...'&gt;&lt;/div&gt; {code}
emailButton | Inserts a submit button that only logs the email and stays on current page, even if you enter text in the search term. The email field must be configured; emailCheck is optional, but if no emailCheck, the email permission will always be true. | {code} &lt;input id='emailButton' type='button' value='Submit'&gt; {code}
emailAutoButton | Similar to searchTextAutoButton but for the email field. This feature allows you to auto-execute the same action as another button when you press ‘enter’ on the email field. By configuring this feature, it becomes equal to the emailButton, so the action of pressing ‘enter’ will be the same as a mouse click on the emailButton. | Add/update this style in your html: {code} &lt;input id='emailAutoButton' type='hidden'&gt; {code} &lt;br&gt; Then within the JS script, instead of inserting {code}emailAutoButton:'emailAutoButton'{code} have the feature call the visible button, i.e. {code}emailAutoButton:'emailButton'{code}
searchAndEmailButton | Inserts a submit button that logs the search term and email and goes to the search result. Only works in combo with searchText and email features. | {code} &lt;input id='searchAndEmailButton' type='button' value='Submit'&gt; {code}
autoDecideButton | Inserts a button that automatically decides the action based on the configuration of search term and email features. If there is only searchText, this will act the same as searchButton; if there is only email, this will act the same as emailButton; if there are both searchText and email, this will act the same as searchAndEmailButton. | {code} &lt;input id='autoDecideButton' type='button' value='Submit'&gt; {code}
highlight | This feature allows you to customize the wrapper style. By default, the checkhighlight class is called (a red 2px border). | Add/update this style in your html: {code}
&lt;style type="text/css"&gt;
.checkhighlight2{border:2px solid #FF0000;}
&lt;/style&gt;{code} Then add this JS statement: {code}
        highlight:'checkhighlight2',{code}
{table}






\\
\\


1.1 Suggested Combinations:

Below are examples of common/working feature combinations. Features in parenthesis can be removed and the page should still work. For all features, the values can be updated to customize the page, and each input line can be moved around to create a visual design.
\\
\\

*Search only - no validation:*&lt;br&gt;
searchText + searchButton + searchTextAutoButton (+ subject) (+ subjectParent) (+ defaultSearchText)

{code}
#includeMacros("AdWordsJump.TemplateJs")

&lt;input id='searchText' type='text'&gt;
&lt;input id='subjectParent' type='hidden' value='LanguageArts'&gt;
&lt;input id='subject' type='hidden' value='ReadingComprehension'&gt;

&lt;input id='searchButton' type='button' value='Submit'&gt;
&lt;input id='searchTextAutoButton' type='hidden'&gt;

&lt;script type="text/javascript" language="javascript"&gt;
    new AdWordJumpPage({
        searchText:'searchText',
        defaultSearchText:'Enter your search term',
        subjectParent:'subjectParent',
        subject:'subject',
        searchButton:'searchButton',
        searchTextAutoButton:'searchButton'
    });
&lt;/script&gt;
{code}

\\
\\
*Search only - with validation:*&lt;br&gt;
searchText + searchButton + searchTextAutoButton (+ subject) (+ subjectParent) (+ defaultSearchText) + allowEmptySearchText (+ searchTextWrapper)

{code}
#includeMacros("AdWordsJump.TemplateJs")

&lt;div id='searchTextWrapper'&gt;&lt;input id='searchText' type='text'&gt;&lt;/div&gt;
&lt;input id='subjectParent' type='hidden' value='LanguageArts'&gt;
&lt;input id='subject' type='hidden' value='ReadingComprehension'&gt;

&lt;input id='searchButton' type='button' value='Submit'&gt;
&lt;input id='searchTextAutoButton' type='hidden'&gt;

&lt;script type="text/javascript" language="javascript"&gt;
    new AdWordJumpPage({
        searchText:'searchText',
        searchTextWrapper:'searchTextWrapper',
        defaultSearchText:'Enter your search term',
        subjectParent:'subjectParent',
        subject:'subject',
        allowEmptySearchText:false,
        searchButton:'searchButton',
        searchTextAutoButton:'searchButton'
    });
&lt;/script&gt;
{code}

\\
\\
*Email only - with checkbox:*&lt;br&gt;
email (+ emailWrapper ) (+ defaultEmailText) + emailCheck (+ emailCheckWrapper) + emailButton + emailAutoButton

{code}
#includeMacros("AdWordsJump.TemplateJs")

&lt;div id='emailCheckWrapper'&gt;&lt;input id='emailCheck' type='checkbox'&gt;&lt;/div&gt;
&lt;div id='emailWrapper'&gt;&lt;input id='email' type='text'&gt;&lt;/div&gt;

&lt;input id='emailButton' type='button' value='Submit'&gt;
&lt;input id='emailAutoButton' type='hidden'&gt;

&lt;script type="text/javascript" language="javascript"&gt;
    new AdWordJumpPage({
        emailCheckWrapper:'emailCheckWrapper',
        emailCheck:'emailCheck',
        emailWrapper:'emailWrapper',
        email:'email',
        defaultEmailText:'Enter your email address to receive periodic updates',
        emailButton:'emailButton',
        emailAutoButton:'emailButton'
    });
&lt;/script&gt;
{code}

\\
\\
*Email only - without checkbox:*&lt;br&gt;
email (+ emailWrapper) (+ defaultEmailText) + emailButton + emailAutoButton

{code}
#includeMacros("AdWordsJump.TemplateJs")

&lt;div id='emailWrapper'&gt;&lt;input id='email' type='text'&gt;&lt;/div&gt;

&lt;input id='emailButton' type='button' value='Submit'&gt;
&lt;input id='emailAutoButton' type='hidden'&gt;

&lt;script type="text/javascript" language="javascript"&gt;
    new AdWordJumpPage({
        emailWrapper:'emailWrapper',
        email:'email',
        defaultEmailText:'Enter your email address to receive periodic updates',
        emailButton:'emailButton',
        emailAutoButton:'emailButton'
    });
&lt;/script&gt;
{code}

\\
\\
*Search &amp; Email - with checkbox, with search validation:*&lt;br&gt;
searchText (+ subject) (+ subjectParent) (+ defaultSearchText) (+ searchTextWrapper) + allowEmptySearchText + email (+ emailWrapper) (+ defaultEmailText) + emailCheck (+ emailCheckWrapper) + searchAndEmailButton + searchTextAutoButton + emailAutoButton

{code}
#includeMacros("AdWordsJump.TemplateJs")

&lt;div id='searchTextWrapper'&gt;&lt;input id='searchText' type='text'&gt;&lt;/div&gt;
&lt;input id='subjectParent' type='hidden' value='LanguageArts'&gt;
&lt;input id='subject' type='hidden' value='ReadingComprehension'&gt;

&lt;div id='emailCheckWrapper'&gt;&lt;input id='emailCheck' type='checkbox'&gt;&lt;/div&gt;
&lt;div id='emailWrapper'&gt;&lt;input id='email' type='text'&gt;&lt;/div&gt;

&lt;input id='searchAndEmailButton' type='button' value='Submit'&gt;
&lt;input id='searchTextAutoButton' type='hidden'&gt;
&lt;input id='emailAutoButton' type='hidden'&gt;

&lt;script type="text/javascript" language="javascript"&gt;
    new AdWordJumpPage({
        searchText:'searchText',
        searchTextWrapper:'searchTextWrapper',
        allowEmptySearchText:false,
        subjectParent:'subjectParent',
        subject:'subject',
        defaultSearchText:'Enter your search term',
        emailCheckWrapper:'emailCheckWrapper',
        emailCheck:'emailCheck',
        emailWrapper:'emailWrapper',
        email:'email',
        defaultEmailText:'Enter your email address to receive periodic updates',
        searchAndEmailButton:'searchAndEmailButton',
        searchTextAutoButton:'searchAndEmailButton',
        emailAutoButton:'searchAndEmailButton'
    });
&lt;/script&gt;
{code}

\\
\\
*Search &amp; Email - without checkbox, with search validation:*&lt;br&gt;
searchText (+ subject) (+ subjectParent) (+ defaultSearchText) (+ searchTextWrapper) + allowEmptySearchText + email (+ emailWrapper) (+ defaultEmailText) + searchAndEmailButton + searchTextAutoButton + emailAutoButton

{code}
#includeMacros("AdWordsJump.TemplateJs")

&lt;div id='searchTextWrapper'&gt;&lt;input id='searchText' type='text'&gt;&lt;/div&gt;
&lt;input id='subjectParent' type='hidden' value='LanguageArts'&gt;
&lt;input id='subject' type='hidden' value='ReadingComprehension'&gt;

&lt;div id='emailWrapper'&gt;&lt;input id='email' type='text'&gt;&lt;/div&gt;

&lt;input id='searchAndEmailButton' type='button' value='Submit'&gt;
&lt;input id='searchTextAutoButton' type='hidden'&gt;
&lt;input id='emailAutoButton' type='hidden'&gt;

&lt;script type="text/javascript" language="javascript"&gt;
    new AdWordJumpPage({
        searchText:'searchText',
        searchTextWrapper:'searchTextWrapper',
        allowEmptySearchText:false,
        subjectParent:'subjectParent',
        subject:'subject',
        defaultSearchText:'Enter your search term',
        emailWrapper:'emailWrapper',
        email:'email',
        defaultEmailText:'Enter your email address to receive periodic updates',
        searchAndEmailButton:'searchAndEmailButton',
        searchTextAutoButton:'searchAndEmailButton',
        emailAutoButton:'searchAndEmailButton'
    });
&lt;/script&gt;
{code}

\\
\\
*Search &amp; Email - with checkbox, no search validation (configure with separate buttons):*&lt;br&gt;
searchText (+ subject) (+ subjectParent) (+ defaultSearchText) + searchButton + searchTextAutoButton
 + 
email (+ emailWrapper) (+ defaultEmailText) + emailCheck (+ emailCheckWrapper) + emailButton + emailAutoButton

{code}
#includeMacros("AdWordsJump.TemplateJs")

#includeMacros("AdWordsJump.TemplateJs")

&lt;input id='searchText' type='text'&gt;
&lt;input id='subjectParent' type='hidden' value='LanguageArts'&gt;
&lt;input id='subject' type='hidden' value='ReadingComprehension'&gt;
&lt;input id='searchButton' type='button' value='Search'&gt;
&lt;input id='searchTextAutoButton' type='hidden'&gt;
&lt;script type="text/javascript" language="javascript"&gt;
    new AdWordJumpPage({
        searchText:'searchText',
        defaultSearchText:'Enter your search term',
        subjectParent:'subjectParent',
        subject:'subject',
        searchButton:'searchButton',
        searchTextAutoButton:'searchButton'
    });
&lt;/script&gt;

&lt;br&gt;
&lt;hr&gt;
&lt;br&gt;

&lt;div id='emailCheckWrapper'&gt;&lt;input id='emailCheck' type='checkbox' checked&gt;&lt;/div&gt;
&lt;div id='emailWrapper'&gt;&lt;input id='email' type='text'&gt;&lt;/div&gt;
&lt;input id='emailButton' type='button' value='Submit Email'&gt;
&lt;input id='emailAutoButton' type='hidden'&gt;
&lt;script type="text/javascript" language="javascript"&gt;
    new AdWordJumpPage({
        emailWrapper:'emailWrapper',
        email:'email',
        defaultEmailText:'Enter your email address to receive periodic updates',
        emailCheck:'emailCheck',
        emailCheckWrapper:'emailCheckWrapper',
        emailButton:'emailButton',
        emailAutoButton:'emailButton'
    });
&lt;/script&gt;
{code}

\\
\\
*Search &amp; Email - without checkbox, no search validation (configure with separate buttons):*&lt;br&gt;
searchText (+ subject) (+ subjectParent) (+ defaultSearchText) + searchButton + searchTextAutoButton
 + 
email (+ emailWrapper) (+ defaultEmailText) + emailButton + emailAutoButton

{code}
#includeMacros("AdWordsJump.TemplateJs")

#includeMacros("AdWordsJump.TemplateJs")

&lt;input id='searchText' type='text'&gt;
&lt;input id='subjectParent' type='hidden' value='LanguageArts'&gt;
&lt;input id='subject' type='hidden' value='ReadingComprehension'&gt;
&lt;input id='searchButton' type='button' value='Search'&gt;
&lt;input id='searchTextAutoButton' type='hidden'&gt;
&lt;script type="text/javascript" language="javascript"&gt;
    new AdWordJumpPage({
        searchText:'searchText',
        defaultSearchText:'Enter your search term',
        subjectParent:'subjectParent',
        subject:'subject',
        searchButton:'searchButton',
        searchTextAutoButton:'searchButton'
    });
&lt;/script&gt;

&lt;br&gt;
&lt;hr&gt;
&lt;br&gt;

&lt;div id='emailCheckWrapper'&gt;&lt;input id='emailCheck' type='checkbox' checked&gt;&lt;/div&gt;
&lt;div id='emailWrapper'&gt;&lt;input id='email' type='text'&gt;&lt;/div&gt;
&lt;input id='emailButton' type='button' value='Submit Email'&gt;
&lt;input id='emailAutoButton' type='hidden'&gt;
&lt;script type="text/javascript" language="javascript"&gt;
    new AdWordJumpPage({
        emailWrapper:'emailWrapper',
        email:'email',
        defaultEmailText:'Enter your email address to receive periodic updates',
        emailButton:'emailButton',
        emailAutoButton:'emailButton'
    });
&lt;/script&gt;
{code}

\\
\\

1.1 Additional Notes &amp; Example Pages

To view Pan's original implementation notes, see [Notes on GAWLPII|NotesonGAWLPII].

The sample page http://current.dev.curriki.org/xwiki/bin/view/AdWordsJump/TestPage contains various combinations of the new features.</content></xwikidoc>
