<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Panels</web>
<name>PanelEditor</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.Admin</creator>
<author>XWiki.LudovicDubost</author>
<customClass></customClass>
<contentAuthor></contentAuthor>
<creationDate>1157324569000</creationDate>
<date>1157388073000</date>
<contentUpdateDate>1266877070000</contentUpdateDate>
<version>1.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment>Import√© depuis un le XAR</comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<hidden>false</hidden>
<content>#set($showdata = 0)
#set($showEmptyPanels = 1)
#if($xwiki.hasAdminRights())
1 Panel Editor

You can drag and drop panels to rearrange them. To drag a panel, use your mouse and click on the header of the panel. Keep your left mouse button down while you move your mouse and the panel at the same time. While you move the panel you will see in real-time where the panel will be dropped when you releave your left mouse button.

You can add or remove panels by dragging them from the list of available panels to one of the columns or from the column into the list, respectively.

&lt;span class="xwikibuttonlink"&gt;
&lt;a href="javascript:void()" onclick="save(); return false;"&gt;Save the new layout&lt;/a&gt;     
&lt;/span&gt;

1.1 Available Panels
#*
#set ($sql = ", BaseObject as obj where obj.name=doc.fullName and obj.className='Panels.PanelClass' and doc.fullName!='Panels.PanelTemplate'")
&lt;div id="allviewpanels"&gt;
#foreach ($item in $xwiki.searchDocuments($sql))
#set($obj = $xwiki.getDocument($item).getObject("Panels.PanelClass"))
#if($obj.type == 'view')
&lt;div class="panelcontainer"&gt;
&lt;div class="verysmall"&gt;#includeTopic("$item")&lt;/div&gt;
&lt;div class="xwikibuttonlink"&gt;&lt;a href="$xwiki.getURL("$item", "inline")"&gt;$msg.get("edit")&lt;/a&gt; &lt;a href="$xwiki.getURL("$item", "delete")"&gt;$msg.get("delete")&lt;/a&gt;&lt;/div&gt;
&lt;/div&gt;
#end
#end
&lt;/div&gt;
*#

#set ($sql = ", BaseObject as obj where obj.name=doc.fullName and obj.className='Panels.PanelClass' and doc.fullName!='Panels.PanelTemplate'")
&lt;table id="allviewpanels"&gt;
&lt;tr&gt;&lt;th&gt;Panel&lt;/th&gt;&lt;th colspan="2"&gt;Information&lt;/th&gt;&lt;th&gt; &lt;/th&gt;&lt;/tr&gt;
#foreach ($item in $xwiki.searchDocuments($sql))
#set($obj = $xwiki.getDocument($item).getObject("Panels.PanelClass"))
#if($obj.type == 'view')
#set($class = $obj.xWikiClass)
&lt;tr&gt;
&lt;td class="verysmall" rowspan="3"&gt;#displaypanel("$item")&lt;/td&gt;
    &lt;td class="label"&gt;&lt;label&gt;#displayPropName($class.get("name")):&lt;/label&gt;&lt;/td&gt;
    &lt;td&gt;$doc.display("name", $obj)&lt;/td&gt;
&lt;td class="xwikibuttonlink" rowspan="3"&gt;&lt;a href="$xwiki.getURL("$item", "inline")"&gt;$msg.get("edit")&lt;/a&gt;&lt;br/&gt;&lt;br/&gt;&lt;a href="$xwiki.getURL("$item", "delete")"&gt;$msg.get("delete")&lt;/a&gt;&lt;/td&gt;
&lt;/tr&gt;
  &lt;tr&gt;
    &lt;td class="label"&gt;&lt;label&gt;#displayPropName($class.get("type")):&lt;/label&gt;&lt;/td&gt;
    &lt;td&gt;$doc.display("type", $obj)&lt;/td&gt;
  &lt;/tr&gt;
  &lt;tr class="last"&gt;
    &lt;td class="label"&gt;&lt;label&gt;#displayPropName($class.get("description")):&lt;/label&gt;&lt;/td&gt;
    &lt;td&gt;$doc.display("description", $obj)&lt;/td&gt;
  &lt;/tr&gt;
#end
#end
&lt;/table&gt;

1.1 Create

#includeTopic("Panels.CreatePanel")

&lt;span class="xwikibuttonlink"&gt;
&lt;a href="javascript:void()" onclick="save(); return false;"&gt;Save the new layout&lt;/a&gt;     
&lt;/span&gt;

{pre}
#set($ajaxdoc = $xwiki.getDocument("Panels.AjaxEditor"))
#set($ajaxurl = $xwiki.getURL("Panels.HomePageUpdate", "view", "xpage=plain&amp;place=${request.place}"))
&lt;script type="text/javascript" src="$ajaxdoc.getAttachmentURL("Drag.js","download")"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="$ajaxdoc.getAttachmentURL("ieemu.js","download")"&gt;&lt;/script&gt;
&lt;script type="text/javascript" src="$ajaxdoc.getAttachmentURL("toolTip.js","download")"&gt;&lt;/script&gt;
&lt;script type="text/javascript"&gt;
var tipobj=document.all? document.all["dhtmltooltip"] : document.getElementById? document.getElementById("dhtmltooltip") : ""

var parentNode;
var realParent;
var dragel = document.createElement("div");
dragel.id = "dragbox";
dragel.className = "panel";
var dragWidth = 0;
var nb = 0;

var leftPanels = document.getElementById("leftPanels");
var rightPanels = document.getElementById("rightPanels");
var allPanels = document.getElementById("allviewpanels");

var leftPanelsRight = getX(leftPanels) + leftPanels.style.width;
var rightPanelsLeft = getX(rightPanels);
var allpanelsLeft = getX(allPanels);
var allpanelsTop = getY(allPanels);

function debugwrite(sometext){
  document.getElementById("headerglobal").appendChild(
document.createTextNode(sometext));
}

function isPanel(el){
  if (el.className &amp;&amp; ((el.className == "panel") || (el.className.indexOf("panel ") &gt;=0) || (el.className.indexOf(" panel") &gt;=0))){
     return true;
  }
  return false;
}

function getX(el) {
	if (el.offsetParent)
           return el.offsetLeft + getX(el.offsetParent); 
        else {
           if (el.x)
             return el.x;
           else
             return 0;
        }
}
function getY(el) {
	if (el.offsetParent)
           return el.offsetTop + getY(el.offsetParent); 
        else {
           if (el.y)
             return el.y;
           else
             return 0;
        }
}
function getBlocList(el) {
 var list = [];
 var nb = el.childNodes.length;
 for (var i=0; i&lt;nb; i++) {
  var el2 = el.childNodes[i];
  if(isPanel(el2)) {
   if (!el2.isDragging)  {
	list.push(el2);
   }
  }
 }
 return list;
}

function getDragBoxPos(list, y) {
  var nb = list.length;
  if (nb == 0) return 0;
  for (var i=0; i&lt;nb; i++) {
    if (list[i]==dragel)
      return i;
  }
  return -1;
}

function getClosestDropTarget(x, y, w, h) {
  if (!leftPanels &amp;&amp; !rightPanels) return allPanels;
  if (x &gt;= allpanelsLeft &amp;&amp; y &gt;= allpanelsTop 
      &amp;&amp; (x+w) &lt;= (allpanelsLeft + allPanels.offsetWidth)
      &amp;&amp; (y+h) &lt;= (allpanelsTop + allPanels.offsetHeight))
      return allPanels;
  if (!leftPanels) return rightPanels;
  if (!rightPanels) return leftPanels;
  if (x - leftPanelsRight &lt; rightPanelsLeft - x) return leftPanels;
  else return rightPanels;
}
function onDragStart(elt,x,y) {
debugwrite(x + " " + leftPanelsRight + " " + leftPanels.id + " | ");
         realParent = elt.parentNode;
         parentNode = elt.parentNode;
         var el;
         // check what to do: cut and drag if it's from one of the columns, or clone and drag if it's from the "all panels" list
         var isAdded = realParent != leftPanels &amp;&amp; realParent != rightPanels;
         if (isAdded){
           el = elt.cloneNode(true);
           attachDragHandler(el);
         }
         else {
           el = elt;
         }
  	 // Make the placeholder the same size
         if (isAdded) {
           var x = getX(elt);
	   var y = getY(elt);
           // Make the current absolute
	   elt.style.left = x + "px";
	   elt.style.top =  y + "px";
           elt.style.zIndex = "10";
           realParent.replaceChild(el, elt);
	   elt.style.position = "absolute";
           document.body.appendChild(elt);
           elt.isDragging = true;
           dragel.style.height = (elt.offsetHeight-2) +"px";
           dragel.style.display = "block";
 	   dragWidth = elt.offsetWidth;
           allPanels.appendChild(dragel);
           window.prevcolumn = allPanels;
         }
         else {
           var x = getX(el);
	   var y = getY(el);
           dragel.style.height = (el.offsetHeight-2) +"px";
           dragel.style.display = "block";
 	   dragWidth = el.offsetWidth;
           // Make the current absolute
	   el.style.left = x + "px";
	   el.style.top =  y + "px";
           el.style.zIndex = "10";
           realParent.replaceChild(dragel, elt);
	   el.style.position = "absolute";
           document.body.appendChild(el);
           el.isDragging = true;
           window.prevcolumn = parentNode;
         }
}
function onDrag(el,x,y) {
  parentNode = getClosestDropTarget(x,y, el.offsetWidth, el.offsetHeight);
  if(parentNode != window.prevcolumn){
    window.prevcolumn.removeChild(dragel);
    if (parentNode != allPanels){
      parentNode.appendChild(dragel);
      allPanels.style.backgroundColor = "#FFF";
    }
    else{
      allPanels.style.backgroundColor = "#EEE";
    }
  }
  window.prevcolumn = parentNode;
  var list = getBlocList(parentNode);
  var pos = getDragBoxPos(list, y);
  if(pos == -1) return;
  if (list.length==0){
    parentNode.appendChild(dragel);
  }
  else if (pos!=0 &amp;&amp; y&lt;=getY(list[pos-1])) {
    parentNode.insertBefore(dragel, list[pos-1]);
  }
  else if (pos!=(list.length-1) &amp;&amp; y&gt;=getY(list[pos+1])) {
    if (list[pos+2]) {
      parentNode.insertBefore(dragel, list[pos+2]);
    } else {
      parentNode.appendChild( dragel); 
    }
  }
}
function onDragEnd(el,x,y) {
   if (parentNode == allPanels){
      el.parentNode.removeChild(el);
      dragel.parentNode.removeChild(dragel);
      allPanels.style.backgroundColor = "#FFF";
   }
   else {
      el.isDragging = false;
      el.style.position = "static";
      parentNode.replaceChild(el, dragel);
      dragel.style.display = "none";
//      el.style.width = dragWidth;
   }
}
//------------------
// threadsafe asynchronous XMLHTTPRequest code
function executeCommand(url, callback) {


    // we use a javascript feature here called "inner functions"
    // using these means the local variables retain their values after the outer function
    // has returned. this is useful for thread safety, so
    // reassigning the onreadystatechange function doesn't stomp over earlier requests.


    function ajaxBindCallback() {
        if (ajaxRequest.readyState == 4) {
            if (ajaxRequest.status == 200) {
                if (ajaxCallback) {
                    ajaxCallback(ajaxRequest.responseText);
                } else {
                    alert('no callback defined');
                }
            } else {
                alert("There was a problem retrieving the xml data:\n" + ajaxRequest.status + ":\t" + ajaxRequest.statusText + "\n" + ajaxRequest.responseText);
            }
        }
    }

    // addMessage(url);
    // use a local variable to hold our request and callback until the inner function is called...
    var ajaxRequest = null;
    var ajaxCallback = callback;

    // bind our callback then hit the server...
    if (window.XMLHttpRequest) {
        // moz et al
        ajaxRequest = new XMLHttpRequest();
        ajaxRequest.onreadystatechange = ajaxBindCallback;
        ajaxRequest.open("GET", url, true);
        ajaxRequest.send(null);
    } else if (window.ActiveXObject) {
        // ie
        ajaxRequest = new ActiveXObject("Microsoft.XMLHTTP");
        if (ajaxRequest) {
            ajaxRequest.onreadystatechange = ajaxBindCallback;
            ajaxRequest.open("GET", url, true);
            ajaxRequest.send();
        }
        else{
            alert("your browser does not support xmlhttprequest" )
        }

    }
    else{
        alert("your browser does not support xmlhttprequest" )
    }


}
function start1() {
var divs = document.getElementsByTagName("div");
for(var i = 0; i &lt; divs.length; i++) {
  el = divs[i];
  var id = el.id;
  if(isPanel(el)) {
    attachDragHandler(el);
  }
 }
}
function attachDragHandler(el){
    el.ondblclick = function(ev) {};
    Drag.init(el,el);
    el.onDragStart = function (x,y) { onDragStart(this,x,y);};
    el.onDrag = function (x,y) { onDrag(this,x,y);};
    el.onDragEnd = function (x,y) { onDragEnd(this,x,y);};
    var titlebar = el.getElementsByTagName("h5").item(0);
    titlebar.onclick=function(ev) {};
    titlebar.onClick=function(ev) {};  
}
function getBlocIdList(el) {
 var list = "";
 var nb = el.childNodes.length;
 for (var i=0; i&lt;nb; i++) {
  var el2 = el.childNodes[i];
  if(isPanel(el2)) {
   if (!el2.isDragging)  {
        if (list!="")
          list+=",";
	list += el2.id;
   }
  }
 }
 return list;
}

function save() {
 var res = true;//confirm("The Panel Layout saving is in Beta. Please confirm you want to save your layout");
 if (res==true) {
 url = '$ajaxurl';
 if (leftPanels) {
  var leftPanelsList = getBlocIdList(leftPanels);
  url += "&amp;leftPanels=" + leftPanelsList;
 }
 
 if (rightPanels) {
  var rightPanelsList = getBlocIdList(rightPanels);
  url += "&amp;rightPanels=" + rightPanelsList;
 }
 if (navigator.userAgent.indexOf("MSIE")!=-1) {
   alert("MSIE cannot currently save layout properly: " + url);
 } else
  executeCommand(url, saveResult);
 } 
}
function saveResult(html) {
 if(html=="SUCCESS")
  alert("Panels Layout have been saved propertly")
 else {
  alert("An error occured while trying to save the panel layout")
  alert(html)
 }
}

start1();
&lt;/script&gt;
&lt;div id="dhtmltooltip"&gt;&lt;/div&gt;
{/pre}
#else
#xwikimessageboxstart("Panel Editor" "")
You need to be administrator of the Place to use the Home Page Editor
#xwikimessageboxend()
#end</content></xwikidoc>
