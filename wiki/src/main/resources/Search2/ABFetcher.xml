<?xml version="1.0" encoding="UTF-8"?>
<xwikidoc>
<web>Search2</web>
<name>ABFetcher</name>
<language></language>
<defaultLanguage>en</defaultLanguage>
<translation>0</translation>
<parent></parent>
<creator>XWiki.adminPolx</creator>
<author>XWiki.LudovicDubost</author>
<customClass></customClass>
<contentAuthor>XWiki.LudovicDubost</contentAuthor>
<creationDate>1298486703000</creationDate>
<date>1369944294000</date>
<contentUpdateDate>1369944294000</contentUpdateDate>
<version>9.1</version>
<title></title>
<template></template>
<defaultTemplate></defaultTemplate>
<validationScript></validationScript>
<comment></comment>
<minorEdit>false</minorEdit>
<syntaxId>xwiki/1.0</syntaxId>
<hidden>false</hidden>
<object>
<class>
<name>XWiki.TagClass</name>
<customClass></customClass>
<customMapping></customMapping>
<defaultViewSheet></defaultViewSheet>
<defaultEditSheet></defaultEditSheet>
<defaultWeb></defaultWeb>
<nameField></nameField>
<validationScript></validationScript>
<tags>
<cache>0</cache>
<disabled>0</disabled>
<displayType>select</displayType>
<multiSelect>1</multiSelect>
<name>tags</name>
<number>1</number>
<prettyName>Tags</prettyName>
<relationalStorage>1</relationalStorage>
<separator> </separator>
<separators> ,|</separators>
<size>30</size>
<unmodifiable>0</unmodifiable>
<values></values>
<classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
</tags>
</class>
<name>Search2.ABFetcher</name>
<number>0</number>
<className>XWiki.TagClass</className>
<guid>e0b98b46-27eb-4ffe-900c-305ecc5921a5</guid>
<property>
<tags/>
</property>
</object>
<content>import java.sql.Connection
import java.sql.DriverManager
import java.sql.ResultSet
import java.sql.PreparedStatement
import com.xpn.xwiki.api.Context
import javax.servlet.ServletContext
import javax.sql.DataSource
import org.apache.commons.logging.Log
import org.apache.commons.logging.LogFactory
import java.util.regex.Pattern
import java.util.regex.Matcher

public class ABFetcher {


    static Log LOG = LogFactory.getLog("ABFetcher");
    Connection conn = null;
    PreparedStatement stmt = null;

    public void init(Context context) {
        //  mysql -u dev -h 63.241.109.12 -p currikidev_ab_c
        ServletContext servletContext= context.getContext().getEngineContext().getServletContext();
        conn = servletContext.getAttribute("ABconnection");
        if(conn==null || conn.isClosed()) {
            LOG.error("starting connecting.");
            com.mysql.jdbc.jdbc2.optional.MysqlDataSource ds = null;
            ds = new com.mysql.jdbc.jdbc2.optional.MysqlDataSource();
            LOG.error("Datasource is up: " + ds);

            InputStream inS = servletContext.getResourceAsStream("/WEB-INF/hibernate.cfg.xml");
            StringBuffer buff = new StringBuffer(3000);
            int c = 0; int n = 0;
            while((c=inS.read())!=-1) {
                buff.append((char) c);
                if(n++&gt;10000) break;
            }

            String content = buff.toString();
            def server = "", uName = "", uPwd = "";
            Matcher matcher = Pattern.compile("jdbc:mysql://([^/]*)/").matcher(content);
            if(matcher.find()) server = matcher.group(1);

            matcher = Pattern.compile("['\"]connection.username['\"][ ]*&gt;([^&lt;]*)&lt;/property&gt;").matcher(content);
            if(matcher.find()) uName = matcher.group(1);

            matcher = Pattern.compile("['\"]connection.password['\"][ ]*&gt;([^&lt;]*)&lt;/property&gt;").matcher(content);
            if(matcher.find()) uPwd = matcher.group(1);


            ds.setUser(uName);
            ds.setPassword(uPwd);
            ds.setServerName(server);

            if("www.curriki.org".equals(context.getXWiki().Param('curriki.system.hostname')))
                ds.setDatabaseName("prod_ab");
            else if("beta.curriki.org".equals(context.getXWiki().Param('curriki.system.hostname')))
                ds.setDatabaseName("beta_ab");
            else
                ds.setDatabaseName("currikidev_ab_c");
            ds.setPortNumber(3306);
            ds.setAutoReconnect(true);
            LOG.error("Datasource is configured: " + ds);
            LOG.error("About to open connection.");
            conn = ds.getConnection();
            LOG.error("Connection is up: " + conn);

            servletContext.setAttribute("ABconnection",conn);
        }

        String sqlTemplate="select topic.guid, topic.state_num, topic.stem, topic.text, standard.grade, standard.grade_code\n"+
                    "  from\n"+
                    "    xwiki_resource as rs,\n"+
                    "    ab_resource_alignment as align,\n"+
                    "    ab_topic as topic,\n"+
                    "    ab_standard as standard\n"+
                    "  where\n"+
                    "    rs.resource_name = ? "+
                    "    and align.resource_id=rs.id\n"+
                    "    and align.topic_id=topic.id\n"+
                    "    and standard.id=topic.standard_id;"
        stmt = conn.prepareStatement(sqlTemplate);
    }

    /**
     * Returns topic.guid, topic.state_num, topic.stem, topic.text, standard.grade, standard.grade_code
     *
     * */
    public List getAlignments(String fullname) {
        if(conn==null || stmt == null) {
            throw new IllegalStateException("No alignment queriable.");
        }
        List list = new LinkedList();
        stmt.setString(1,fullname);
        ResultSet rs = stmt.executeQuery();
        while(rs.next()) {
            Map m = new HashMap();
            m.put("topic.guid",rs.getString(1));
            m.put("topic.state_num", rs.getString(2));
            m.put("topic.stem", rs.getString(3));
            m.put("topic.text", rs.getString(4));
            m.put("standard.grade", rs.getString(5));
            m.put("standard.grade_code", rs.getString(6));
            list.add(m);
        }
        return list;
    }

    public String getBlop() {
        return "blop";
    }

    /* public void close() {
        try {if(stmt!=null) stmt.close();} catch(Exception ex) {ex.printStackTrace(); }
        stmt = null;
        try {if(conn!=null) conn.close();} catch(Exception ex) {ex.printStackTrace(); }
        conn = null;
    }

    public void finalize() {
        this.close();
    } */

}
</content></xwikidoc>