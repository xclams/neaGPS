###
### This part is copied from the commentsinline.vm template, to reuse the macros used there for comments displaying. 
### There might be modifications in it, since this code is not made to be displaying comments for multiple documents 
###
## adding ratings app
$xwiki.jsx.use('XWiki.Ratings', { 'minify' : false })
$xwiki.ssx.use('XWiki.Ratings')
$xwiki.jsfx.use('conversations/conversationscomments.js', {'forceSkinAction' : true, 'defer' : false})
$xwiki.ssfx.use('uicomponents/viewers/comments.css', true)
$xwiki.jsfx.use('uicomponents/widgets/notification.js')
$xwiki.ssfx.use('uicomponents/widgets/notification.css', true)
$xwiki.jsfx.use('uicomponents/widgets/confirmationBox.js')
$xwiki.ssfx.use('uicomponents/widgets/confirmationBox.css', true)
$xwiki.ssfx.use('conversations/conversations.css', true)

## use curriki avatars
#macro(mediumUserAvatar2 $user)
  #curriki_avatar_width_height($xwiki.getDocument($user) "48" "")
#end
#macro(smallUserAvater2 $user)
  #curriki_avatar_width_height($xwiki.getDocument($user) "48" "")
#end
##
##---------------------------------------------------------------------
## Set some 'global' variables
##---------------------------------------------------------------------
##
## need this editors list to activate wysiwyg
#set($editors = "")
##
#set($xCommentClass = 'XWiki.XWikiComments')
##
#if(!$replyTo)
  #set($replyTo = $escapetool.xml($!request.get('replyto')))
#end

#if ("$!replyToConversation" == "")
  #set($replyToConversation = "$!request.get('replytoconversation')")
#end
##
#set($requestedByAjax = ($request.getHeader('X-Requested-With') == 'XMLHttpRequest'))
##
#if("$!captchaAnswerWrong" == '')
  #set($captchaAnswerWrong = ($request.get('captchaAnswerWrong') == '1'))
#end
##
#if("$!hideCaptcha" == '')
  #set($hideCaptcha = ($captchaAnswerWrong != true && $requestedByAjax))
#end
##
#if("$!fillInFields" == '')
  #set($fillInFields = ($captchaAnswerWrong == true))
#end
##
## If $fillInFields, then set variables for each field.
#if($fillInFields)
  #set($author = $!escapetool.xml($request.get("${xCommentClass}_author")))
  #set($comment = $!escapetool.xml($request.get("${xCommentClass}_comment")))
  #if("$!replyTo" == '')
    #set($replyTo = $escapetool.xml($!request.get("${xCommentClass}_replyto")))
  #end
#end
##
#if("$!author" == '')
  #set($author = $msg.get('core.viewers.comments.add.guestName.default'))
#end
##
#set($xredirect = $request.get("xredirect"))
#if("$!xredirect" == '')
  #set($xredirect = "$doc.getURL('view')?$request.getQueryString()")
#end
##
#if("$!offerGuestsCaptcha" == '')
  #set($offerGuestsCaptcha = $xwiki.getSpacePreferenceAsInt('guest_comment_requires_captcha', 0) == 1)
#end
##
##---------------------------------------------------------------------
## Macros
##---------------------------------------------------------------------
##
## If we are viewing this page through the commentAdd or save actions then we should redirect to view
## This doesn't apply if it is being viewed through javascript.
#macro(redirectIfActionNotView)
  #if(!$requestedByAjax && $xcontext.getAction() != 'view' && $xcontext.getAction() != 'get')
    #if(!$captchaAnswerWrong)
      $response.sendRedirect("$doc.getURL('view')?viewer=conversations");
    #else
      #foreach($name in $request.getParameterNames())
        #set($queryString = "$!queryString&$name=$escapetool.url($request.get($name))")
      #end
      $response.sendRedirect($doc.getURL('view', "captchaAnswerWrong=1&$queryString"));
    #end
    $response.setContentLength(0)
    #stop
  #end
#end
##
##
##
#macro(addCommentToThreads $comment $commentThreads $rootKey)
  #set($thread = $commentThreads.get("$!{comment.replyto}"))
  #if("$!{thread}" == '')
    #set($thread = $commentThreads.get($rootKey))
  #end
  #set($discard = $thread.add($comment.number))
  #set($thread = '')
#end
##
##
##
#macro(displayThread $key $commentThreads, $commentDoc)
  ## If request parameter replyto is specified then we show the form under that comment.
  #if($replyTo == "$key" && $replyToConversation == $commentDoc.fullName)
    #displayCommentForm($commentDoc)
    #set($replied = true)
  #end
  ##
  #set($thread = $commentThreads.get("$!key"))
  #if($thread.size() > 0)
    <ul class="commentreplies">
    #foreach($commentID in $thread)
      <li class="reply">
      #displayComment($commentDoc.getObject($xCommentClass, $commentID))
      <div class="commentthread">
        #displayThread($commentID, $commentThreads)
      </div>
      </li>
    #end
    </ul>
  #end
#end
##
##
##
#macro(displayComment $comment, $commentDoc)
  ## compute the conversation id to make proper permalinks for comments
  #if ("$!conversationId" == "")
    #set($conversationId = $util.clearName("${commentDoc.name}$xwiki.formatDate($commentDoc.creationDate, 'dd/MM/yyyy HH:mm:ss')"))  
  #end
  ## display the comment
  <div id="xwikicomment_${conversationId}_${comment.number}" class="xwikicomment#if($comment.getProperty('author').value == $commentDoc.creator) commentByCreator#end">
    <div class="commentavatar">#if("$!comment.replyto" == '')#mediumUserAvatar2($comment.author)#{else}#smallUserAvater2($comment.author)#end</div>
    <div class="commentheader">
      <div>
      <span class="commentauthor">$!xwiki.getUserName($doc.display('author', 'view', $comment))</span>##
      #set($date = $comment.getProperty('date').value)
## Don't indent, otherwise the comma will be misplaced
#if($date), <span class="commentdate">$!xwiki.formatDate($date)</span>#end
      </div>
      <span class="commenttools">
      ## compose the comment permalink in conversation carefully, taking care of making it point to the article's conversation view and not to the conversation itself
      #set($commentPermalinkInConversation = $doc.getURL('view', 'viewer=conversations'))
      #set($parentArticle = $doc.parent)
      #if (!$isArticle && $parentArticle != "")
        #set($commentPermalinkInConversation = $xwiki.getURL($doc.parent, 'view', 'viewer=conversations'))
      #end
      <span class="commenttool comment-permalink"><a class="permalink" href="$escapetool.xml($commentPermalinkInConversation)#xwikicomment_${conversationId}_${comment.number}" title="$msg.get('core.viewers.comments.permalink')">$msg.get('core.viewers.comments.permalink')</a></span>
      #if($xwiki.hasAccessLevel('comment', $xcontext.user, $commentDoc.prefixedFullName))
        <span class="commenttool commentreply"><a class="commentreply" href="$escapetool.xml($xredirect.replaceAll('&?replyto=\d++', ''))&amp;replyto=${comment.number}&amp;replytoconversation=${escapetool.url($commentDoc.fullName)}#xwikicomment_${conversationId}_${comment.number}" title="$msg.get('core.viewers.comments.reply')"#if("$!replyTo" == "${comment.number}" && "$!replyToConversation" == "$!commentDoc.fullName") style="display: none;"#end>$msg.get('core.viewers.comments.reply')</a></span>
        #if($comment.author == $xcontext.user && $xwiki.hasAccessLevel('edit', $xcontext.user, $services.model.serialize($commentDoc.documentReference, 'compactwiki')))
          ## Although this will fail if the javascript is not working, we assume it's always working
          ## so edit comment will redirect to the conversations view of the article for which we edited comment, so that we have a correct reloading after save
          #set($commentEditRedirect = $commentDoc.getURL('get', 'xpage=xpart&vm=conversations.vm'))
          <span class="commenttool commentedit"><a class="edit" href="$commentDoc.getURL('view', "viewer=conversationscomments&amp;number=${comment.number}&amp;xredirect=$escapetool.url($commentEditRedirect)")" title="$msg.get('core.viewers.comments.edit')">$msg.get('core.viewers.comments.edit')</a></span>
        #end
      #end
      #if ($xwiki.hasAccessLevel('edit', $xcontext.user, $services.model.serialize($commentDoc.documentReference, 'compactwiki')))
        <span class="commenttool commentdelete"><a class="delete" href="$xwiki.getURL('XWiki.ConversationActions', 'view', "action=deletecomment&amp;form_token=$!{services.csrf.getToken()}&amp;conversationdoc=${escapetool.url($services.model.serialize($commentDoc.documentReference, 'compactwiki'))}&amp;commentnumber=${comment.number}&amp;xredirect=$escapetool.url($xredirect)")" title="$msg.get('core.viewers.comments.delete')">$msg.get('core.viewers.comments.delete')</a></span>
      #end
      </span>## commenttools
    </div>## commentheader
    <div class="commentcontent">$commentDoc.getRenderedContent($comment.getProperty('comment').getValue(), $doc.getSyntax().toIdString())</div>
  </div>## xwikicomment
#end
##
##
##
#macro(displayCommentForm $commentDoc)
  ## compute the conversation id to make proper permalinks for comments
  #if ("$!conversationId" == "")
    #set($conversationId = $util.clearName("${commentDoc.name}$xwiki.formatDate($commentDoc.creationDate, 'dd/MM/yyyy HH:mm:ss')"))  
  #end
  #if($xwiki.hasAccessLevel('comment', $xcontext.user, $commentDoc.prefixedFullName))
    ## prepare a nice redirect URL: for the reply form, redirect to the comemnt to which we replied, 
    ## for the new comment form, redirect to the conversation itself
    #if ("$!replyTo" != "")
      #set($redirectURL = "$doc.getURL('view', 'viewer=conversations')#xwikicomment_${conversationId}_${replyTo}")
    #else
      #set($redirectURL = "$doc.getURL('view', 'viewer=conversations')#${conversationId}")
    #end
  <form id="${conversationId}_addcommentform" action="$escapetool.xml($commentDoc.getURL('commentadd', "xredirect=$escapetool.url($redirectURL)"))" method="post" class="AddComment">
      <fieldset class="expanded commentform" id="${conversationId}_commentform">
        <legend>$msg.get('core.viewers.comments.add.title')</legend>
        ##  <div class="commentavatar">#mediumUserAvatar2($context.user)</div>
        #if($xcontext.user != 'XWiki.XWikiGuest')
          <label>$msg.get('core.viewers.comments.add.guestName.prompt') $xwiki.getUserName($xcontext.user)</label>
          <input type="hidden" name="${xCommentClass}_author" value="$xcontext.user"/>
        #else
          <label for="${xCommentClass}_author">$msg.get('core.viewers.comments.add.guestName.prompt') <input type="text" id="${xCommentClass}_author" name="${xCommentClass}_author" value="$author"/></label>
          <strong><a href='$escapetool.xml($xwiki.getURL('XWiki.XWikiLogin', 'login', "xredirect=$escapetool.url($xwiki.getRequestURL())"))'>$msg.get('login')</a></strong>
        #end
        ## CSRF prevention
        <input type="hidden" name="form_token" value="$!{services.csrf.getToken()}" />
        <input type="hidden" name="${xCommentClass}_date" value=""/>
        <input type="hidden" name="${xCommentClass}_replyto" value="$!replyTo"/>
        <div class="commentcontainer">
           <label for="${xCommentClass}_comment_${conversationId}">$msg.get('core.viewers.comments.add.comment.label')</label>
           <textarea id='${xCommentClass}_comment_${conversationId}' rows='5' cols="80" name='${xCommentClass}_comment'>$!comment</textarea>
## adding to wysiwyg editors
#if($editors=="")
 #set($editors = "${xCommentClass}_comment_${conversationId}")
#else
 #set($editors = "${editors},${xCommentClass}_comment_${conversationId}")
#end
        </div>
        #if($xcontext.user == 'XWiki.XWikiGuest' && $offerGuestsCaptcha)
          #displayCaptcha()
        #end
        <div>
          <span class="buttonwrapper"><input type="submit" value="$msg.get('core.viewers.comments.add.submit')" class="button"/></span>
          <span class="buttonwrapper"><a class="cancel secondary button" href="$doc.getURL('view', 'viewer=conversations')">$msg.get('core.viewers.comments.add.cancel')</a></span>
        </div>
      </fieldset>
    </form>
  #end
#end
##
##
##
#macro(displayCaptcha)
  <div id='commentCaptcha'>
  ## We only want to hide the captcha if we're sure the user has javascript, if this is an ajax call then it's a safe bet.
  #if($hideCaptcha)
    <script type='text/javascript'>
    $('commentCaptcha').style.display = "none";
    var handler = function() {
      var captchaDiv = $('commentCaptcha');
      var image = new Element('img', {'src' : '$commentDoc.getURL("imagecaptcha")?nounce=$datetool.getSystemTime()', 'alt' : '$escapetool.javascript($msg.get("core.captcha.image.alternateText"))'});
      captchaDiv.insertBefore(image, captchaDiv.firstChild);
      Event.observe(image, 'load', function() {
        Effect.SlideDown('commentCaptcha', { duration: 0.7 });
      });
      Event.stopObserving($('${xCommentClass}_comment'), 'focus', handler);
    }.bind(this);
    Event.observe($('${xCommentClass}_comment'), 'focus', handler);
    </script>
  #else
    <img src='$commentDoc.getURL("imagecaptcha")?nounce=$datetool.getSystemTime()' alt='$msg.get("core.captcha.image.alternateText")' />
  #end
  <input type='hidden' name='captcha_type' value='image'/>
  <br/>
  <label for='captcha_answer'>$msg.get('core.captcha.image.instruction')</label>
  <br/>
  <input id='captcha_answer' name='captcha_answer' type='text'>
  #if($captchaAnswerWrong)
    <span style="color:#C00; font-weight:bold; margin:0 0 0 5px;">$msg.get('core.captcha.captchaAnswerIsWrong')</span>
  #end
  <div class="wikimodel-emptyline"></div>
  </div>
#end
###
### Done copying
###
###
###
###
#macro(displayConversationAddForm)
  <div class="addconversation-container">
    <a href="$doc.getURL('view', 'viewer=conversations&amp;action=addconversation')" class="addconversation-activator">$msg.get('conversation.add.activator')</a>
    <form class="#if("$!request.action" != "addconversation")hidden#end addconversation xform full" method="post" action="$xwiki.getURL('XWiki.ConversationActions')">
      <div>
        <input type="hidden" name="action" value="addconversation" />
        <input type="hidden" name="document" value="$doc.name" />
        <input type="hidden" name="rubrique" value="$doc.space" />
        <input type="hidden" name="form_token" value="$services.csrf.token" />
        <input type="hidden" name="xredirect" value="$escapetool.xml($doc.getURL('view', 'viewer=conversations'))" />
      </div>
      <dl>
        <dt>$msg.get('XWiki.ConversationClass_title')</dt>
        <dd><input type="text" name="title" /></dd>
        ## create a fake conversation object to be able to display the status and the type selectors
        #set($fakeConversation = $doc.newObject('XWiki.ConversationClass'))
        <dt>$doc.displayPrettyName('type', $fakeConversation)</dt>
        <dd>$doc.display('type', 'edit', '', $fakeConversation)</dd>
        ## create a fake comment object to be able to display the comment content input
        #set($fakeComment = $doc.getObject('XWiki.XWikiComments', 0))
        #if (!$fakeComment)
          #set($fakeComment = $doc.newObject('XWiki.XWikiComments'))
        #else
          #set($discard = $fakeComment.set('comment', ''))
        #end
        <dt>$doc.displayPrettyName('comment', $fakeComment)</dt>
        <dd>$doc.display('comment', 'edit', '', $fakeComment)</dd>
      </dl>
      <div>
        ## cannot choose status, will always create as in progress
        <input type="hidden" name="XWiki.ConversationClass_${fakeConversation.number}_status" value="inprogress" />      
      </div>
      
      <div class="buttonwrapper">
        <input type="submit" class="button" value="$msg.get('save')" />
        <a href="$doc.getURL('view', 'viewer=conversations')" class="cancel">$msg.get('cancel')</a>
      </div>
    </form>
  </div>
  <div style="height: 40px;"></div>
#end
###
### Conversations page in the "view" mode
###
###
#if("$!request.xpage" == 'conversations')
  $response.sendRedirect($doc.getURL('view', 'viewer=conversations'))
#else
  ## 0. find out if this is an article page or a conversation page, since conversations should display only comments (for ajax re-rendering)
  ## while articles should display all their conversations
  #set($isArticle = true)
  #if ($doc.getObject('XWiki.ConversationClass'))
    #set($isArticle = false)
  #end
  ## start rendering the forms
  #if ($isArticle)
    <div id="document-title"><h1>$msg.get('conversations.title', [$escapetool.xml($doc.getPlainTitle()), $doc.getURL()])</h1></div>
    ## display conversations
    ## 1. first, a little add form
    #displayConversationAddForm()
  #end
  ## 2. then, the list of existing conversations with their comments
  ## find all the documents which are the children of this document and have an object of type conversation inside
  #if ($isArticle)
    #set($conversationsSql = ', BaseObject obj where doc.parent = ? and doc.fullName = obj.name and obj.className = ? and doc.fullName != ? order by doc.date desc')
    #set($conversationsSqlParams = [$doc.fullName, 'XWiki.ConversationClass', 'XWiki.ConversationTemplate'])
    #set($conversationDocs = $xwiki.searchDocuments($conversationsSql, $conversationsSqlParams))
  #else
    #set($conversationDocs = [$doc.fullName])
  #end
  <div class="xwikiintracontent">
    #foreach($conversationDocName in $conversationDocs)
      #set($conversationDoc = $xwiki.getDocument($conversationDocName))
      #set($conversationObject = $conversationDoc.getObject('XWiki.ConversationClass'))
      #set($comments = $conversationDoc.getComments())
      ## compose a conversation id for the conversation from the document name and the creation date, to make sure it gets unique 
      ## otherwise two conversations that differ only by a space or so will get the same id 
      #set($conversationId = $util.clearName("${conversationDoc.name}$xwiki.formatDate($conversationDoc.creationDate, 'dd/MM/yyyy HH:mm:ss')"))
     <div class="conversation" id="$conversationId">
        #set($replied = false)
        ## display the title only when displaying article conversations
        #if($isArticle)
          <h2 class="conversation-titlebar $conversationObject.getProperty('type').value $conversationObject.getProperty('status').value">
            <span class="conversation-title">$conversationDoc.displayTitle</span>
            <span class="conversation-inlineactions">
              <span class="conversation-permalink">
                <a class="permalink" href="$escapetool.xml($doc.getURL('view', 'viewer=conversations'))#${conversationId}" title="$msg.get('conversation.permalink.tooltip')">
                  ## we need to put image here since we cannot do background + indented text + fixed width as we do for comment tools, because overflow: hidden is messing up the display of the other icons.
                  <img src="$escapetool.xml($xwiki.getSkinFile('icons/silk/link.png'))" alt="$escapetool.xml($msg.get('conversation.permalink'))" />
                </a>
              </span>
              <span class="separator">|</span>
              <span class="conversation-ratings">
                <span class="conversation-like">
                  <input type="hidden" name="documenttolike" value="$conversationDoc.fullName" />
                  <img src="$escapetool.xml($xwiki.getDocument('XWiki.ConversationSheet').getAttachmentURL('conversation-like.png'))" alt="$escapetool.xml($msg.get('conversation.like.button'))"
                       #if($xwiki.ratings.getRating($conversationDoc, $xcontext.user) == $util.null)class="canVote" title="$msg.get('conversation.like.button.tooltip')"#else title="$msg.get('conversation.like.button.alreadyliked.tooltip')"#end />
                </span>
                #set($rating = $xwiki.ratings.getAverageRating($conversationDoc).nbVotes)
                <span class="conversation-score" title="$msg.get('conversation.like.score.tooltip', [$rating])">$rating</span>
              </span>
              <span class="separator">|</span>
              <span class="conversation-count">$comments.size()</span>
            </span>
          </h2>
          <div class="conversation-info">
            <span class="conversation-creationdate">
              $msg.get('conversation.creationdate', [$xwiki.getUserName($conversationDoc.creator), $xwiki.formatDate($conversationDoc.creationDate)])
            </span>
            <span class="conversation-infoseparator">&ndash;</span>
            <span class="conversation-updatedate">
              $msg.get('conversation.updatedate', [$xwiki.formatDate($conversationDoc.date)])
            </span>
            <span class="conversation-infoseparator">&ndash;</span>
            <span class="conversation-status">
              $conversationDoc.display('status', 'view', $conversationObject)
            </span>
            <span class="conversation-actions">
              #if($xwiki.hasAccessLevel('edit', $xcontext.user, $services.model.serialize($conversationDoc.documentReference, 'compactwiki')))
                <span class="conversation-edit"><a href="$conversationDoc.getURL('edit')" title="$msg.get('conversation.edit.title')">$msg.get('conversation.edit')</a></span>
              #end
              #if($xwiki.hasAccessLevel('delete', $xcontext.user, $services.model.serialize($conversationDoc.documentReference, 'compactwiki')))        
                <span class="conversation-delete"><a href="$xwiki.getURL('XWiki.ConversationActions', 'view', "action=deleteconversation&amp;form_token=$!{services.csrf.getToken()}&amp;conversationdoc=${escapetool.url($services.model.serialize($conversationDoc.documentReference, 'compactwiki'))}&amp;xredirect=$escapetool.url($xredirect)")" title="$msg.get('conversation.delete.title')">$msg.get('conversation.delete')</a></span>
              #end
            </span>
          </div>
        #end

        <div class="commentscontent">
          #if($comments.size() > 0)
            #set($rootKey = "-1")
            #set($commentThreads = $util.hashMap)
            #set($discard = $commentThreads.put($rootKey, $util.arrayList))
            #foreach($comment in $comments)
              #set($discard = $commentThreads.put("${comment.number}", $util.arrayList))
            #end
            #foreach($comment in $comments)
              #addCommentToThreads($comment, $commentThreads, $rootKey)
            #end
            ##
            ## Comments will be rendered in the context of the conversation document.
            #set($commentDoc = $conversationDoc)
            ##
            #displayThread($rootKey, $commentThreads, $commentDoc)
          #else
            <p class="noitems">$msg.get('conversation.empty')</p>
          #end
          #if(!$replied)
            #displayCommentForm($conversationDoc)
          #end
        </div>
      </div>
    #end
  </div>
#end
#if($editors)
#if($doc.syntax.toIdString() == "xwiki/1.0")
<script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/wysiwyg/tinymce/tiny_mce/tiny_mce.js")"></script>
<script type="text/javascript" src="$xwiki.getSkinFile("js/xwiki/wysiwyg/tinymce/wiki_editor/wiki_editor.js")"></script>
<script type="text/javascript">
//<![CDATA[
    wikiEditor.init({
        elements : "$!{escapetool.javascript($editors)}",
        language: "en",
        mode: "exact",
        content_css: "$xwiki.getSkinFile("style.css")",
        debug : false,
        remove_linebreaks : false,
        plugins: 'table, contextmenu, paste, searchreplace',
        wiki_use_style: '$xwiki.useWysiwygStyleToolbar()',
        wiki_images_path : '${doc.getURL('download')}/',
        wiki_attach_path : '${doc.URL}',
        wiki_macro_path : '${doc.URL}',
        wiki_plugins: 'core, attachments, macros'
    });
//]]>
</script>
#elseif($services.wysiwyg.isSyntaxSupported($doc.syntax.toIdString()))
## Load the rich text object properties using a compact WYSIWYG editor.
#**
  * Creates a new WYSIWYG editor instance using the given configuration parameters.
  *
  * @param $parameters WYSIWYG editor configuration parameters
  *#
#macro(wysiwyg_createEditor $parameters)
#set($jsVarName = "wysiwygConfig${util.generateRandomString(4)}")
#wysiwyg_writeConfig($jsVarName $parameters)
<script type="text/javascript">
//<![CDATA[
var WysiwygConfig = WysiwygConfig || {};
Wysiwyg.onModuleLoad(function() {
  WysiwygConfig['${parameters.hookId}'] = $jsVarName; 
  $('${parameters.hookId}').wysiwyg = new WysiwygEditor($jsVarName);
  $jsVarName = undefined;
});
//]]>
</script>
#end
#wysiwyg_editProperties($doc $editors false)
#else
#warning("The new GWT-based WYSIWYG editor doesn't support the syntax of the current document: <em>$doc.syntax.toIdString()</em>.")
#end
#end
